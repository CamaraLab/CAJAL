from _typeshed import Incomplete

def configuration_model(deg_sequence, create_using: Incomplete | None = ..., seed: Incomplete | None = ...): ...
def directed_configuration_model(in_degree_sequence, out_degree_sequence, create_using: Incomplete | None = ..., seed: Incomplete | None = ...): ...
def expected_degree_graph(w, seed: Incomplete | None = ..., selfloops: bool = ...): ...
def havel_hakimi_graph(deg_sequence, create_using: Incomplete | None = ...): ...
def directed_havel_hakimi_graph(in_deg_sequence, out_deg_sequence, create_using: Incomplete | None = ...): ...
def degree_sequence_tree(deg_sequence, create_using: Incomplete | None = ...): ...
def random_degree_sequence_graph(sequence, seed: Incomplete | None = ..., tries: int = ...): ...

class DegreeSequenceRandomGraph:
    rng: Incomplete
    degree: Incomplete
    m: Incomplete
    dmax: Incomplete
    def __init__(self, degree, rng) -> None: ...
    remaining_degree: Incomplete
    graph: Incomplete
    def generate(self): ...
    def update_remaining(self, u, v, aux_graph: Incomplete | None = ...) -> None: ...
    def p(self, u, v): ...
    def q(self, u, v): ...
    def suitable_edge(self): ...
    def phase1(self) -> None: ...
    def phase2(self) -> None: ...
    def phase3(self) -> None: ...
