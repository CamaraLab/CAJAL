from _typeshed import Incomplete
from collections.abc import Generator

def enumerate_all_cliques(G) -> Generator[Incomplete, None, None]: ...
def find_cliques(G, nodes: Incomplete | None = ...) -> Generator[Incomplete, None, Incomplete]: ...
def find_cliques_recursive(G, nodes: Incomplete | None = ...): ...
def make_max_clique_graph(G, create_using: Incomplete | None = ...): ...
def make_clique_bipartite(G, fpos: Incomplete | None = ..., create_using: Incomplete | None = ..., name: Incomplete | None = ...): ...
def graph_clique_number(G, cliques: Incomplete | None = ...): ...
def graph_number_of_cliques(G, cliques: Incomplete | None = ...): ...
def node_clique_number(G, nodes: Incomplete | None = ..., cliques: Incomplete | None = ..., separate_nodes: bool = ...): ...
def number_of_cliques(G, nodes: Incomplete | None = ..., cliques: Incomplete | None = ...): ...
def cliques_containing_node(G, nodes: Incomplete | None = ..., cliques: Incomplete | None = ...): ...

class MaxWeightClique:
    G: Incomplete
    incumbent_nodes: Incomplete
    incumbent_weight: int
    node_weights: Incomplete
    def __init__(self, G, weight) -> None: ...
    def update_incumbent_if_improved(self, C, C_weight) -> None: ...
    def greedily_find_independent_set(self, P): ...
    def find_branching_nodes(self, P, target): ...
    def expand(self, C, C_weight, P) -> None: ...
    def find_max_weight_clique(self): ...

def max_weight_clique(G, weight: str = ...): ...
