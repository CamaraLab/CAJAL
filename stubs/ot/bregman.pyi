from .utils import dist as dist, unif as unif
from _typeshed import Incomplete

def sinkhorn(a, b, M, reg, method: str = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def sinkhorn2(a, b, M, reg, method: str = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def sinkhorn_knopp(a, b, M, reg, numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def greenkhorn(a, b, M, reg, numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def sinkhorn_stabilized(a, b, M, reg, numItermax: int = ..., tau: float = ..., stopThr: float = ..., warmstart: Incomplete | None = ..., verbose: bool = ..., print_period: int = ..., log: bool = ..., **kwargs): ...
def sinkhorn_epsilon_scaling(a, b, M, reg, numItermax: int = ..., epsilon0: float = ..., numInnerItermax: int = ..., tau: float = ..., stopThr: float = ..., warmstart: Incomplete | None = ..., verbose: bool = ..., print_period: int = ..., log: bool = ..., **kwargs): ...
def geometricBar(weights, alldistribT): ...
def geometricMean(alldistribT): ...
def projR(gamma, p): ...
def projC(gamma, q): ...
def barycenter(A, M, reg, weights: Incomplete | None = ..., method: str = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def barycenter_sinkhorn(A, M, reg, weights: Incomplete | None = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def barycenter_stabilized(A, M, reg, tau: float = ..., weights: Incomplete | None = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def convolutional_barycenter2d(A, reg, weights: Incomplete | None = ..., numItermax: int = ..., stopThr: float = ..., stabThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def unmix(a, D, M, M0, h0, reg, reg0, alpha, numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def jcpot_barycenter(Xs, Ys, Xt, reg, metric: str = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def empirical_sinkhorn(X_s, X_t, reg, a: Incomplete | None = ..., b: Incomplete | None = ..., metric: str = ..., numIterMax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def empirical_sinkhorn2(X_s, X_t, reg, a: Incomplete | None = ..., b: Incomplete | None = ..., metric: str = ..., numIterMax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def empirical_sinkhorn_divergence(X_s, X_t, reg, a: Incomplete | None = ..., b: Incomplete | None = ..., metric: str = ..., numIterMax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ..., **kwargs): ...
def screenkhorn(a, b, M, reg, ns_budget: Incomplete | None = ..., nt_budget: Incomplete | None = ..., uniform: bool = ..., restricted: bool = ..., maxiter: int = ..., maxfun: int = ..., pgtol: float = ..., verbose: bool = ..., log: bool = ...): ...
