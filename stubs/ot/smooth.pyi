from _typeshed import Incomplete

def projection_simplex(V, z: int = ..., axis: Incomplete | None = ...): ...

class Regularization:
    gamma: Incomplete
    def __init__(self, gamma: float = ...) -> None: ...
    def delta_Omega(X) -> None: ...
    def max_Omega(X, b) -> None: ...
    def Omega(T) -> None: ...

class NegEntropy(Regularization):
    def delta_Omega(self, X): ...
    def max_Omega(self, X, b): ...
    def Omega(self, T): ...

class SquaredL2(Regularization):
    def delta_Omega(self, X): ...
    def max_Omega(self, X, b): ...
    def Omega(self, T): ...

def dual_obj_grad(alpha, beta, a, b, C, regul): ...
def solve_dual(a, b, C, regul, method: str = ..., tol: float = ..., max_iter: int = ..., verbose: bool = ...): ...
def semi_dual_obj_grad(alpha, a, b, C, regul): ...
def solve_semi_dual(a, b, C, regul, method: str = ..., tol: float = ..., max_iter: int = ..., verbose: bool = ...): ...
def get_plan_from_dual(alpha, beta, C, regul): ...
def get_plan_from_semi_dual(alpha, b, C, regul): ...
def smooth_ot_dual(a, b, M, reg, reg_type: str = ..., method: str = ..., stopThr: float = ..., numItermax: int = ..., verbose: bool = ..., log: bool = ...): ...
def smooth_ot_semi_dual(a, b, M, reg, reg_type: str = ..., method: str = ..., stopThr: float = ..., numItermax: int = ..., verbose: bool = ..., log: bool = ...): ...
