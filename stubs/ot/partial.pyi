from .lp import emd as emd
from _typeshed import Incomplete

def partial_wasserstein_lagrange(a, b, M, reg_m: Incomplete | None = ..., nb_dummies: int = ..., log: bool = ..., **kwargs): ...
def partial_wasserstein(a, b, M, m: Incomplete | None = ..., nb_dummies: int = ..., log: bool = ..., **kwargs): ...
def partial_wasserstein2(a, b, M, m: Incomplete | None = ..., nb_dummies: int = ..., log: bool = ..., **kwargs): ...
def gwgrad_partial(C1, C2, T): ...
def gwloss_partial(C1, C2, T): ...
def partial_gromov_wasserstein(C1, C2, p, q, m: Incomplete | None = ..., nb_dummies: int = ..., G0: Incomplete | None = ..., thres: int = ..., numItermax: int = ..., tol: float = ..., log: bool = ..., verbose: bool = ..., **kwargs): ...
def partial_gromov_wasserstein2(C1, C2, p, q, m: Incomplete | None = ..., nb_dummies: int = ..., G0: Incomplete | None = ..., thres: int = ..., numItermax: int = ..., tol: float = ..., log: bool = ..., verbose: bool = ..., **kwargs): ...
def entropic_partial_wasserstein(a, b, M, reg, m: Incomplete | None = ..., numItermax: int = ..., stopThr: float = ..., verbose: bool = ..., log: bool = ...): ...
def entropic_partial_gromov_wasserstein(C1, C2, p, q, reg, m: Incomplete | None = ..., G0: Incomplete | None = ..., numItermax: int = ..., tol: float = ..., log: bool = ..., verbose: bool = ...): ...
def entropic_partial_gromov_wasserstein2(C1, C2, p, q, reg, m: Incomplete | None = ..., G0: Incomplete | None = ..., numItermax: int = ..., tol: float = ..., log: bool = ..., verbose: bool = ...): ...
