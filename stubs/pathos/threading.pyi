from _typeshed import Incomplete
from pathos.abstract_launcher import AbstractWorkerPool
# from pathos.helpers import ThreadPool as _ThreadPool

class ThreadPool(AbstractWorkerPool):
    def __init__(self, *args, **kwds) -> None: ...
    clear: Incomplete
    def map(self, f, *args, **kwds): ...
    def imap(self, f, *args, **kwds): ...
    def uimap(self, f, *args, **kwds): ...
    def amap(self, f, *args, **kwds): ...
    def pipe(self, f, *args, **kwds): ...
    def apipe(self, f, *args, **kwds): ...
    def restart(self, force: bool = ...): ...
    def close(self) -> None: ...
    def terminate(self) -> None: ...
    def join(self) -> None: ...
    nthreads: Incomplete
    nodes: Incomplete
    __state__: Incomplete
