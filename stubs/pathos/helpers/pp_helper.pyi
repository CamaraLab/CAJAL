from _typeshed import Incomplete
from ppft import Server as Server, _Task as _Task # type: ignore

class ApplyResult(_Task):
    unpickled: bool
    def __init__(self, task) -> None: ...
    def ready(self): ...
    def successful(self): ...
    def wait(self, timeout: Incomplete | None = ...) -> None: ...
    def get(self, timeout: Incomplete | None = ...): ...
    def __call__(self, raw_result: bool = ...): ...
    def finalize(self, sresult) -> None: ...
    @property
    def lock(self): ...
    @property
    def tid(self): ...
    @property
    def server(self): ...
    @property
    def callback(self): ...
    @property
    def callbackargs(self): ...
    @property
    def group(self): ...
    @property
    def finished(self): ...

class MapResult:
    callback: Incomplete
    callbackargs: Incomplete
    group: Incomplete
    finished: bool
    unpickled: bool
    def __init__(self, size, callback: Incomplete | None = ..., callbackargs=..., group: str = ...) -> None: ...
    def finalize(self, *results) -> None: ...
    def queue(self, *tasks) -> None: ...
    def __call__(self): ...
    def wait(self, timeout: Incomplete | None = ...) -> None: ...
    def get(self, timeout: Incomplete | None = ...): ...
    def ready(self): ...
    def successful(self): ...
