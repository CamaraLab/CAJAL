import numpy
from _typeshed import Incomplete
from typing import Any, Literal, overload

def lzma_encode(data: Union[bytes, numpy.ndarray], level: Union[int, None] = ..., *, out: Incomplete | None = ...) -> bytes: ...
def lzma_decode(data: bytes, *, out: Incomplete | None = ...) -> bytes: ...
def zlib_encode(data: Union[bytes, numpy.ndarray], level: Union[int, None] = ..., *, out: Incomplete | None = ...) -> bytes: ...
def zlib_decode(data: bytes, *, out: Incomplete | None = ...) -> bytes: ...
def packbits_decode(encoded: bytes, *, out: Incomplete | None = ...) -> bytes: ...
@overload
def delta_encode(data: Union[bytes, bytearray], axis: int = ..., dist: int = ..., *, out: Incomplete | None = ...) -> bytes: ...
@overload
def delta_encode(data: numpy.ndarray, axis: int = ..., dist: int = ..., *, out: Incomplete | None = ...) -> numpy.ndarray: ...
@overload
def delta_decode(data: Union[bytes, bytearray], axis: int, dist: int, *, out: Any) -> bytes: ...
@overload
def delta_decode(data: numpy.ndarray, axis: int, dist: int, *, out: Any) -> numpy.ndarray: ...
@overload
def bitorder_decode(data: Union[bytes, bytearray], *, out: Incomplete | None = ..., _bitorder: list[Any] = ...) -> bytes: ...
@overload
def bitorder_decode(data: numpy.ndarray, *, out: Incomplete | None = ..., _bitorder: list[Any] = ...) -> numpy.ndarray: ...
def packints_decode(data: bytes, dtype: Union[numpy.dtype, str], bitspersample: int, runlen: int = ..., *, out: Incomplete | None = ...) -> numpy.ndarray: ...
def packints_encode(data: numpy.ndarray, bitspersample: int, axis: int = ..., *, out: Incomplete | None = ...) -> bytes: ...
def float24_decode(data: bytes, byteorder: Literal['>', '<']) -> numpy.ndarray: ...
