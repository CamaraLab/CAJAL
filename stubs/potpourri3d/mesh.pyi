from .core import *
from _typeshed import Incomplete

class MeshHeatMethodDistanceSolver:
    bound_solver: Incomplete
    def __init__(self, V, F, t_coef: float = ..., use_robust: bool = ...) -> None: ...
    def compute_distance(self, v_ind): ...
    def compute_distance_multisource(self, v_inds): ...

def compute_distance(V, F, v_ind): ...
def compute_distance_multisource(V, F, v_inds): ...

class MeshVectorHeatSolver:
    bound_solver: Incomplete
    def __init__(self, V, F, t_coef: float = ...) -> None: ...
    def extend_scalar(self, v_inds, values): ...
    def get_tangent_frames(self): ...
    def get_connection_laplacian(self): ...
    def transport_tangent_vector(self, v_ind, vector): ...
    def transport_tangent_vectors(self, v_inds, vectors): ...
    def compute_log_map(self, v_ind): ...

class EdgeFlipGeodesicSolver:
    bound_solver: Incomplete
    def __init__(self, V, F, t_coef: float = ...) -> None: ...
    def find_geodesic_path(self, v_start, v_end): ...
    def find_geodesic_path_poly(self, v_list): ...
    def find_geodesic_loop(self, v_list): ...

def cotan_laplacian(V, F, denom_eps: float = ...): ...
def face_areas(V, F): ...
def vertex_areas(V, F): ...
