from . import exceptions as exceptions, grouping as grouping, triangles as triangles, util as util
from .base import Trimesh as Trimesh
from .constants import log as log, tol as tol
from .geometry import align_vectors as align_vectors, faces_to_edges as faces_to_edges, plane_transform as plane_transform
from _typeshed import Incomplete

def revolve(linestring, angle: Incomplete | None = ..., sections: Incomplete | None = ..., transform: Incomplete | None = ..., **kwargs): ...
def extrude_polygon(polygon, height, transform: Incomplete | None = ..., triangle_args: Incomplete | None = ..., **kwargs): ...
def sweep_polygon(polygon, path, angles: Incomplete | None = ..., **kwargs): ...
def extrude_triangulation(vertices, faces, height, transform: Incomplete | None = ..., **kwargs): ...
def triangulate_polygon(polygon, triangle_args: Incomplete | None = ..., engine: Incomplete | None = ..., **kwargs): ...
def box(extents: Incomplete | None = ..., transform: Incomplete | None = ..., **kwargs): ...
def icosahedron(): ...
def icosphere(subdivisions: int = ..., radius: float = ..., color: Incomplete | None = ...): ...
def uv_sphere(radius: float = ..., count=..., theta: Incomplete | None = ..., phi: Incomplete | None = ...): ...
def capsule(height: float = ..., radius: float = ..., count=...): ...
def cone(radius, height, sections: Incomplete | None = ..., transform: Incomplete | None = ..., **kwargs): ...
def cylinder(radius, height: Incomplete | None = ..., sections: Incomplete | None = ..., segment: Incomplete | None = ..., transform: Incomplete | None = ..., **kwargs): ...
def annulus(r_min, r_max, height: Incomplete | None = ..., sections: Incomplete | None = ..., transform: Incomplete | None = ..., segment: Incomplete | None = ..., **kwargs): ...
def random_soup(face_count: int = ...): ...
def axis(origin_size: float = ..., transform: Incomplete | None = ..., origin_color: Incomplete | None = ..., axis_radius: Incomplete | None = ..., axis_length: Incomplete | None = ...): ...
def camera_marker(camera, marker_height: float = ..., origin_size: Incomplete | None = ...): ...
def truncated_prisms(tris, origin: Incomplete | None = ..., normal: Incomplete | None = ...): ...
