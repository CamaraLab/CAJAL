from . import exceptions as exceptions, util as util
from .constants import log as log, tol as tol
from _typeshed import Incomplete

def merge_vertices(mesh, merge_tex: Incomplete | None = ..., merge_norm: Incomplete | None = ..., digits_vertex: Incomplete | None = ..., digits_norm: Incomplete | None = ..., digits_uv: Incomplete | None = ...) -> None: ...
def group(values, min_len: int = ..., max_len=...): ...
def hashable_rows(data, digits: Incomplete | None = ...): ...
def float_to_int(data, digits: Incomplete | None = ..., dtype=...): ...
def unique_ordered(data, return_index: bool = ..., return_inverse: bool = ...): ...
def unique_bincount(values, minlength: int = ..., return_inverse: bool = ..., return_counts: bool = ...): ...
def merge_runs(data, digits: Incomplete | None = ...): ...
def unique_float(data, return_index: bool = ..., return_inverse: bool = ..., digits: Incomplete | None = ...): ...
def unique_rows(data, digits: Incomplete | None = ..., keep_order: bool = ...): ...
def unique_value_in_row(data, unique: Incomplete | None = ...): ...
def group_rows(data, require_count: Incomplete | None = ..., digits: Incomplete | None = ...): ...
def boolean_rows(a, b, operation=...): ...
def group_vectors(vectors, angle: float = ..., include_negative: bool = ...): ...
def group_distance(values, distance): ...
def clusters(points, radius): ...
def blocks(data, min_len: int = ..., max_len=..., wrap: bool = ..., digits: Incomplete | None = ..., only_nonzero: bool = ...): ...
def group_min(groups, data): ...
