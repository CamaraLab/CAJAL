from .. import caching as caching, grouping as grouping, intersections as intersections, util as util
from ..constants import tol as tol
from .ray_util import contains_points as contains_points
from _typeshed import Incomplete

class RayMeshIntersector:
    mesh: Incomplete
    def __init__(self, mesh) -> None: ...
    def intersects_id(self, ray_origins, ray_directions, return_locations: bool = ..., multiple_hits: bool = ..., **kwargs): ...
    def intersects_location(self, ray_origins, ray_directions, **kwargs): ...
    def intersects_first(self, ray_origins, ray_directions, **kwargs): ...
    def intersects_any(self, ray_origins, ray_directions, **kwargs): ...
    def contains_points(self, points): ...

def ray_triangle_id(triangles, ray_origins, ray_directions, triangles_normal: Incomplete | None = ..., tree: Incomplete | None = ..., multiple_hits: bool = ...): ...
def ray_triangle_candidates(ray_origins, ray_directions, tree): ...
def ray_bounds(ray_origins, ray_directions, bounds, buffer_dist: float = ...): ...
