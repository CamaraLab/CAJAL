from .. import caching as caching, intersections as intersections, util as util
from ..constants import log_time as log_time
from .ray_util import contains_points as contains_points
from _typeshed import Incomplete

class RayMeshIntersector:
    mesh: Incomplete
    def __init__(self, geometry, scale_to_box: bool = ...) -> None: ...
    def intersects_location(self, ray_origins, ray_directions, multiple_hits: bool = ...): ...
    def intersects_id(self, ray_origins, ray_directions, multiple_hits: bool = ..., max_hits: int = ..., return_locations: bool = ...): ...
    def intersects_first(self, ray_origins, ray_directions): ...
    def intersects_any(self, ray_origins, ray_directions): ...
    def contains_points(self, points): ...

class _EmbreeWrap:
    origin: Incomplete
    scale: Incomplete
    scene: Incomplete
    def __init__(self, vertices, faces, scale) -> None: ...
    def run(self, origins, normals, **kwargs): ...
