import abc
from . import color as color
from .. import exceptions as exceptions, grouping as grouping, util as util
from _typeshed import Incomplete

class Material(util.ABC, metaclass=abc.ABCMeta):
    def __init__(self, *args, **kwargs) -> None: ...
    def __hash__(self): ...
    @property
    @abc.abstractmethod
    def main_color(self): ...
    @property
    def name(self): ...
    @name.setter
    def name(self, value) -> None: ...
    def copy(self): ...

class SimpleMaterial(Material):
    image: Incomplete
    ambient: Incomplete
    diffuse: Incomplete
    specular: Incomplete
    kwargs: Incomplete
    def __init__(self, image: Incomplete | None = ..., diffuse: Incomplete | None = ..., ambient: Incomplete | None = ..., specular: Incomplete | None = ..., glossiness: Incomplete | None = ..., **kwargs) -> None: ...
    def to_color(self, uv): ...
    def to_obj(self, mtl_name: Incomplete | None = ...): ...
    def __hash__(self): ...
    @property
    def main_color(self): ...
    @property
    def glossiness(self): ...
    @glossiness.setter
    def glossiness(self, value) -> None: ...
    def to_pbr(self): ...

class MultiMaterial(Material):
    materials: Incomplete
    def __init__(self, materials: Incomplete | None = ..., **kwargs) -> None: ...
    def to_pbr(self): ...
    def __hash__(self): ...
    def __iter__(self): ...
    def __next__(self): ...
    def __len__(self) -> int: ...
    @property
    def main_color(self) -> None: ...
    def add(self, material) -> None: ...
    def get(self, idx): ...

class PBRMaterial(Material):
    normalTexture: Incomplete
    emissiveTexture: Incomplete
    occlusionTexture: Incomplete
    metallicRoughnessTexture: Incomplete
    name: Incomplete
    def __init__(self, name: Incomplete | None = ..., emissiveFactor: Incomplete | None = ..., emissiveTexture: Incomplete | None = ..., baseColorFactor: Incomplete | None = ..., metallicFactor: Incomplete | None = ..., roughnessFactor: Incomplete | None = ..., normalTexture: Incomplete | None = ..., occlusionTexture: Incomplete | None = ..., baseColorTexture: Incomplete | None = ..., metallicRoughnessTexture: Incomplete | None = ..., doubleSided: bool = ..., alphaMode: Incomplete | None = ..., alphaCutoff: Incomplete | None = ..., **kwargs) -> None: ...
    @property
    def emissiveFactor(self): ...
    @emissiveFactor.setter
    def emissiveFactor(self, value) -> None: ...
    @property
    def alphaMode(self): ...
    @alphaMode.setter
    def alphaMode(self, value) -> None: ...
    @property
    def alphaCutoff(self): ...
    @alphaCutoff.setter
    def alphaCutoff(self, value) -> None: ...
    @property
    def doubleSided(self): ...
    @doubleSided.setter
    def doubleSided(self, value) -> None: ...
    @property
    def metallicFactor(self): ...
    @metallicFactor.setter
    def metallicFactor(self, value) -> None: ...
    @property
    def roughnessFactor(self): ...
    @roughnessFactor.setter
    def roughnessFactor(self, value) -> None: ...
    @property
    def baseColorFactor(self): ...
    @baseColorFactor.setter
    def baseColorFactor(self, value) -> None: ...
    @property
    def baseColorTexture(self): ...
    @baseColorTexture.setter
    def baseColorTexture(self, value) -> None: ...
    def copy(self): ...
    def to_color(self, uv): ...
    def to_simple(self): ...
    @property
    def main_color(self): ...
    def __hash__(self): ...

def empty_material(color: Incomplete | None = ...): ...
def from_color(vertex_colors): ...
def pack(materials, uvs, deduplicate: bool = ...): ...
