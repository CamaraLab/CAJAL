from . import triangles as triangles
from .geometry import index_sparse as index_sparse
from .triangles import mass_properties as mass_properties
from .util import unitize as unitize
from _typeshed import Incomplete

def filter_laplacian(mesh, lamb: float = ..., iterations: int = ..., implicit_time_integration: bool = ..., volume_constraint: bool = ..., laplacian_operator: Incomplete | None = ...): ...
def filter_humphrey(mesh, alpha: float = ..., beta: float = ..., iterations: int = ..., laplacian_operator: Incomplete | None = ...): ...
def filter_taubin(mesh, lamb: float = ..., nu: float = ..., iterations: int = ..., laplacian_operator: Incomplete | None = ...): ...
def filter_mut_dif_laplacian(mesh, lamb: float = ..., iterations: int = ..., volume_constraint: bool = ..., laplacian_operator: Incomplete | None = ...): ...
def laplacian_calculation(mesh, equal_weight: bool = ..., pinned_vertices=...): ...
def get_vertices_normals(mesh): ...
def dilate_slope(vertices, faces, normals, v, eps): ...
