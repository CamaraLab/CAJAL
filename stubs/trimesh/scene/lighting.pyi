from .. import transformations as transformations, util as util, visual as visual
from _typeshed import Incomplete

class Light(util.ABC):
    name: Incomplete
    def __init__(self, name: Incomplete | None = ..., color: Incomplete | None = ..., intensity: Incomplete | None = ..., radius: Incomplete | None = ...) -> None: ...
    @property
    def color(self): ...
    @color.setter
    def color(self, value) -> None: ...
    @property
    def intensity(self): ...
    @intensity.setter
    def intensity(self, value) -> None: ...
    @property
    def radius(self): ...
    @radius.setter
    def radius(self, value) -> None: ...

class DirectionalLight(Light):
    def __init__(self, name: Incomplete | None = ..., color: Incomplete | None = ..., intensity: Incomplete | None = ..., radius: Incomplete | None = ...) -> None: ...

class PointLight(Light):
    def __init__(self, name: Incomplete | None = ..., color: Incomplete | None = ..., intensity: Incomplete | None = ..., radius: Incomplete | None = ...) -> None: ...

class SpotLight(Light):
    def __init__(self, name: Incomplete | None = ..., color: Incomplete | None = ..., intensity: Incomplete | None = ..., radius: Incomplete | None = ..., innerConeAngle: float = ..., outerConeAngle=...) -> None: ...
    @property
    def innerConeAngle(self): ...
    @innerConeAngle.setter
    def innerConeAngle(self, value) -> None: ...
    @property
    def outerConeAngle(self): ...
    @outerConeAngle.setter
    def outerConeAngle(self, value) -> None: ...

def autolight(scene): ...
