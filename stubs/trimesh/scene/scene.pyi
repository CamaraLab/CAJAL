from . import cameras as cameras, lighting as lighting
from .. import caching as caching, convex as convex, grouping as grouping, transformations as transformations, units as units, util as util
from ..exchange import export as export
from ..parent import Geometry3D as Geometry3D
from ..util import unique_name as unique_name
from .transforms import SceneGraph as SceneGraph
from _typeshed import Incomplete

class Scene(Geometry3D):
    geometry: Incomplete
    graph: Incomplete
    metadata: Incomplete
    def __init__(self, geometry: Incomplete | None = ..., base_frame: str = ..., metadata=..., graph: Incomplete | None = ..., camera: Incomplete | None = ..., lights: Incomplete | None = ..., camera_transform: Incomplete | None = ...) -> None: ...
    def apply_transform(self, transform): ...
    def add_geometry(self, geometry, node_name: Incomplete | None = ..., geom_name: Incomplete | None = ..., parent_node_name: Incomplete | None = ..., transform: Incomplete | None = ..., extras: Incomplete | None = ...): ...
    def delete_geometry(self, names) -> None: ...
    def strip_visuals(self) -> None: ...
    def __hash__(self): ...
    @property
    def is_empty(self): ...
    @property
    def is_valid(self): ...
    def bounds_corners(self): ...
    def bounds(self): ...
    def extents(self): ...
    def scale(self): ...
    def centroid(self): ...
    def area(self): ...
    def triangles(self): ...
    def triangles_node(self): ...
    def geometry_identifiers(self): ...
    def duplicate_nodes(self): ...
    def deduplicated(self): ...
    def set_camera(self, angles: Incomplete | None = ..., distance: Incomplete | None = ..., center: Incomplete | None = ..., resolution: Incomplete | None = ..., fov: Incomplete | None = ...): ...
    @property
    def camera_transform(self): ...
    @camera_transform.setter
    def camera_transform(self, matrix) -> None: ...
    def camera_rays(self): ...
    @property
    def camera(self): ...
    @camera.setter
    def camera(self, camera) -> None: ...
    @property
    def has_camera(self): ...
    @property
    def lights(self): ...
    @lights.setter
    def lights(self, lights) -> None: ...
    def rezero(self) -> None: ...
    def dump(self, concatenate: bool = ...): ...
    def subscene(self, node): ...
    def convex_hull(self): ...
    def export(self, file_obj: Incomplete | None = ..., file_type: Incomplete | None = ..., **kwargs): ...
    def save_image(self, resolution: Incomplete | None = ..., **kwargs): ...
    @property
    def units(self): ...
    @units.setter
    def units(self, value) -> None: ...
    def convert_units(self, desired, guess: bool = ...): ...
    def explode(self, vector: Incomplete | None = ..., origin: Incomplete | None = ...) -> None: ...
    def scaled(self, scale): ...
    def copy(self): ...
    def show(self, viewer: Incomplete | None = ..., **kwargs): ...
    def __add__(self, other): ...

def split_scene(geometry, **kwargs): ...
def append_scenes(iterable, common=..., base_frame: str = ...): ...
