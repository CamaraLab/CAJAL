from .. import caching as caching, transformations as transformations, util as util
from ..caching import hash_fast as hash_fast
from _typeshed import Incomplete

class SceneGraph:
    transforms: Incomplete
    base_frame: Incomplete
    def __init__(self, base_frame: str = ...) -> None: ...
    def update(self, frame_to, frame_from: Incomplete | None = ..., **kwargs) -> None: ...
    def get(self, frame_to, frame_from: Incomplete | None = ...): ...
    def __hash__(self): ...
    def copy(self): ...
    def to_flattened(self): ...
    def to_gltf(self, scene, mesh_index: Incomplete | None = ...): ...
    def to_edgelist(self): ...
    def from_edgelist(self, edges, strict: bool = ...) -> None: ...
    def to_networkx(self): ...
    def show(self, **kwargs) -> None: ...
    def load(self, edgelist) -> None: ...
    def nodes(self): ...
    def nodes_geometry(self): ...
    def geometry_nodes(self): ...
    def remove_geometries(self, geometries) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def clear(self) -> None: ...

class EnforcedForest:
    parents: Incomplete
    edge_data: Incomplete
    node_data: Incomplete
    def __init__(self) -> None: ...
    def add_edge(self, u, v, **kwargs): ...
    def remove_node(self, u): ...
    def shortest_path(self, u, v): ...
    @property
    def nodes(self): ...
    @property
    def children(self): ...
    def successors(self, node): ...
    def __hash__(self): ...

def kwargs_to_matrix(matrix: Incomplete | None = ..., quaternion: Incomplete | None = ..., translation: Incomplete | None = ..., axis: Incomplete | None = ..., angle: Incomplete | None = ..., **kwargs): ...
