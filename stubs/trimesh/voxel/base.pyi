from . import morphology as morphology, ops as ops, transforms as transforms
from .. import caching as caching, util as util
from ..constants import log as log
from ..exchange.binvox import export_binvox as export_binvox
from ..parent import Geometry as Geometry
from .encoding import DenseEncoding as DenseEncoding, Encoding as Encoding
from _typeshed import Incomplete

class VoxelGrid(Geometry):
    metadata: Incomplete
    def __init__(self, encoding, transform: Incomplete | None = ..., metadata: Incomplete | None = ...) -> None: ...
    def crc(self): ...
    def hash(self): ...
    def __hash__(self): ...
    @property
    def encoding(self): ...
    @encoding.setter
    def encoding(self, encoding) -> None: ...
    @property
    def transform(self): ...
    @transform.setter
    def transform(self, matrix) -> None: ...
    @property
    def translation(self): ...
    @property
    def origin(self): ...
    @property
    def scale(self): ...
    @property
    def pitch(self): ...
    @property
    def element_volume(self): ...
    def apply_transform(self, matrix): ...
    def strip(self): ...
    def bounds(self): ...
    def extents(self): ...
    def is_empty(self): ...
    @property
    def shape(self): ...
    def filled_count(self): ...
    def is_filled(self, point): ...
    def fill(self, method: str = ..., **kwargs): ...
    def hollow(self): ...
    def marching_cubes(self): ...
    @property
    def matrix(self): ...
    def volume(self): ...
    def points(self): ...
    @property
    def sparse_indices(self): ...
    def as_boxes(self, colors: Incomplete | None = ..., **kwargs): ...
    def points_to_indices(self, points): ...
    def indices_to_points(self, indices): ...
    def show(self, *args, **kwargs): ...
    def copy(self): ...
    def export(self, file_obj: Incomplete | None = ..., file_type: Incomplete | None = ..., **kwargs): ...
    def revoxelized(self, shape): ...
    def __add__(self, other) -> None: ...
