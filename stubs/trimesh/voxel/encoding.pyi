import abc
from . import runlength as runlength
from .. import caching as caching
from ..exceptions import ExceptionModule as ExceptionModule
from ..util import ABC as ABC, log as log
from _typeshed import Incomplete

class Encoding(ABC, metaclass=abc.ABCMeta):
    def __init__(self, data) -> None: ...
    @property
    @abc.abstractmethod
    def dtype(self): ...
    @property
    @abc.abstractmethod
    def shape(self): ...
    @property
    @abc.abstractmethod
    def sum(self): ...
    @property
    @abc.abstractmethod
    def size(self): ...
    @property
    @abc.abstractmethod
    def sparse_indices(self): ...
    @property
    @abc.abstractmethod
    def sparse_values(self): ...
    @property
    @abc.abstractmethod
    def dense(self): ...
    @abc.abstractmethod
    def gather_nd(self, indices): ...
    @abc.abstractmethod
    def mask(self, mask): ...
    @abc.abstractmethod
    def get_value(self, index): ...
    @abc.abstractmethod
    def copy(self): ...
    @property
    def is_empty(self): ...
    def stripped(self): ...
    def crc(self): ...
    def hash(self): ...
    def __hash__(self): ...
    @property
    def ndims(self): ...
    def reshape(self, shape): ...
    @property
    def flat(self): ...
    def flip(self, axis: int = ...): ...
    @property
    def sparse_components(self): ...
    @property
    def data(self): ...
    def run_length_data(self, dtype=...): ...
    def binary_run_length_data(self, dtype=...): ...
    def transpose(self, perm): ...
    @property
    def mutable(self): ...
    @mutable.setter
    def mutable(self, value) -> None: ...

class DenseEncoding(Encoding):
    def __init__(self, data) -> None: ...
    @property
    def dtype(self): ...
    @property
    def shape(self): ...
    def sum(self): ...
    def is_empty(self): ...
    @property
    def size(self): ...
    @property
    def sparse_components(self): ...
    def sparse_indices(self): ...
    def sparse_values(self): ...
    @property
    def dense(self): ...
    def gather(self, indices): ...
    def gather_nd(self, indices): ...
    def mask(self, mask): ...
    def get_value(self, index): ...
    def reshape(self, shape): ...
    @property
    def flat(self): ...
    def copy(self): ...

class SparseEncoding(Encoding):
    def __init__(self, indices, values, shape: Incomplete | None = ...) -> None: ...
    @staticmethod
    def from_dense(dense_data): ...
    def copy(self): ...
    @property
    def sparse_indices(self): ...
    @property
    def sparse_values(self): ...
    @property
    def dtype(self): ...
    def sum(self): ...
    @property
    def ndims(self): ...
    @property
    def shape(self): ...
    @property
    def size(self): ...
    @property
    def sparse_components(self): ...
    def dense(self): ...
    def gather_nd(self, indices): ...
    def mask(self, mask): ...
    def get_value(self, index): ...
    def stripped(self): ...

def SparseBinaryEncoding(indices, shape: Incomplete | None = ...): ...

class RunLengthEncoding(Encoding):
    def __init__(self, data, dtype: Incomplete | None = ...) -> None: ...
    def is_empty(self): ...
    @property
    def ndims(self): ...
    @property
    def shape(self): ...
    @property
    def dtype(self): ...
    def crc(self): ...
    def hash(self): ...
    def __hash__(self): ...
    @staticmethod
    def from_dense(dense_data, dtype=..., encoding_dtype=...): ...
    @staticmethod
    def from_rle(rle_data, dtype: Incomplete | None = ...): ...
    @staticmethod
    def from_brle(brle_data, dtype: Incomplete | None = ...): ...
    def stripped(self): ...
    def sum(self): ...
    def size(self): ...
    def sparse_components(self): ...
    def sparse_indices(self): ...
    def sparse_values(self): ...
    def dense(self): ...
    def gather(self, indices): ...
    def gather_nd(self, indices): ...
    def sorted_gather(self, ordered_indices): ...
    def mask(self, mask): ...
    def get_value(self, index): ...
    def copy(self): ...
    def run_length_data(self, dtype=...): ...
    def binary_run_length_data(self, dtype=...): ...

class BinaryRunLengthEncoding(RunLengthEncoding):
    def __init__(self, data) -> None: ...
    def is_empty(self): ...
    @staticmethod
    def from_dense(dense_data, encoding_dtype=...): ...
    @staticmethod
    def from_rle(rle_data, dtype: Incomplete | None = ...): ...
    @staticmethod
    def from_brle(brle_data, dtype: Incomplete | None = ...): ...
    def stripped(self): ...
    def sum(self): ...
    def size(self): ...
    @property
    def sparse_components(self): ...
    def sparse_values(self): ...
    def sparse_indices(self): ...
    def dense(self): ...
    def gather(self, indices): ...
    def gather_nd(self, indices): ...
    def sorted_gather(self, ordered_indices): ...
    def mask(self, mask): ...
    def copy(self): ...
    def run_length_data(self, dtype=...): ...
    def binary_run_length_data(self, dtype=...): ...

class LazyIndexMap(Encoding, metaclass=abc.ABCMeta):
    @property
    def is_empty(self): ...
    @property
    def dtype(self): ...
    @property
    def sum(self): ...
    @property
    def size(self): ...
    @property
    def sparse_indices(self): ...
    @property
    def sparse_values(self): ...
    def gather_nd(self, indices): ...
    def get_value(self, index): ...

class FlattenedEncoding(LazyIndexMap):
    @property
    def shape(self): ...
    @property
    def dense(self): ...
    def mask(self, mask): ...
    @property
    def flat(self): ...
    def copy(self): ...

class ShapedEncoding(LazyIndexMap):
    def __init__(self, encoding, shape) -> None: ...
    @property
    def flat(self): ...
    @property
    def shape(self): ...
    @property
    def dense(self): ...
    def mask(self, mask): ...
    def copy(self): ...

class TransposedEncoding(LazyIndexMap):
    def __init__(self, base_encoding, perm) -> None: ...
    def transpose(self, perm): ...
    @property
    def perm(self): ...
    @property
    def shape(self): ...
    @property
    def dense(self): ...
    def gather(self, indices): ...
    def mask(self, mask): ...
    def get_value(self, index): ...
    @property
    def data(self): ...
    def copy(self): ...

class FlippedEncoding(LazyIndexMap):
    def __init__(self, encoding, axes) -> None: ...
    @property
    def shape(self): ...
    @property
    def dense(self): ...
    def mask(self, mask): ...
    def copy(self): ...
    def flip(self, axis: int = ...): ...
