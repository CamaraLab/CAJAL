from .. import grouping as grouping, resources as resources, util as util, visual as visual
from ..constants import log as log
from ..geometry import triangulate_quads as triangulate_quads
from _typeshed import Incomplete

dtypes: Incomplete
inverse_dtypes: Incomplete

def numpy_type_to_ply_type(numpy_type): ...
def load_ply(file_obj, resolver: Incomplete | None = ..., fix_texture: bool = ..., prefer_color: Incomplete | None = ..., *args, **kwargs): ...
def add_attributes_to_dtype(dtype, attributes): ...
def add_attributes_to_header(header, attributes): ...
def add_attributes_to_data_array(data_array, attributes): ...
def assert_attributes_valid(attributes) -> None: ...
def export_ply(mesh, encoding: str = ..., vertex_normal: Incomplete | None = ..., include_attributes: bool = ...): ...
def parse_header(file_obj): ...
def elements_to_kwargs(elements, fix_texture, image, prefer_color: Incomplete | None = ...): ...
def element_colors(element): ...
def load_element_different(properties, data): ...
def load_element_single(properties, data): ...
def ply_ascii(elements, file_obj) -> None: ...
def ply_binary(elements, file_obj): ...
def export_draco(mesh, bits: int = ...): ...
def load_draco(file_obj, **kwargs): ...

draco_encoder: Incomplete
draco_decoder: Incomplete
