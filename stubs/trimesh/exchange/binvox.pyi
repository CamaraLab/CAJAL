from .. import util as util
from ..base import Trimesh as Trimesh
from _typeshed import Incomplete
from typing import NamedTuple

binvox_encoder: Incomplete

class Binvox(NamedTuple):
    rle_data: Incomplete
    shape: Incomplete
    translate: Incomplete
    scale: Incomplete

def parse_binvox_header(fp): ...
def parse_binvox(fp, writeable: bool = ...): ...
def binvox_header(shape, translate, scale): ...
def binvox_bytes(rle_data, shape, translate=..., scale: int = ...): ...
def voxel_from_binvox(rle_data, shape, translate: Incomplete | None = ..., scale: float = ..., axis_order: str = ...): ...
def load_binvox(file_obj, resolver: Incomplete | None = ..., axis_order: str = ..., file_type: Incomplete | None = ...): ...
def export_binvox(voxel, axis_order: str = ...): ...

class Binvoxer:
    SUPPORTED_INPUT_TYPES: Incomplete
    SUPPORTED_OUTPUT_TYPES: Incomplete
    verbose: Incomplete
    def __init__(self, dimension: int = ..., file_type: str = ..., z_buffer_carving: bool = ..., z_buffer_voting: bool = ..., dilated_carving: bool = ..., exact: bool = ..., bounding_box: Incomplete | None = ..., remove_internal: bool = ..., center: bool = ..., rotate_x: int = ..., rotate_z: int = ..., wireframe: bool = ..., fit: bool = ..., block_id: Incomplete | None = ..., use_material_block_id: bool = ..., use_offscreen_pbuffer: bool = ..., downsample_factor: Incomplete | None = ..., downsample_threshold: Incomplete | None = ..., verbose: bool = ..., binvox_path: Incomplete | None = ...) -> None: ...
    @property
    def file_type(self): ...
    def __call__(self, path, overwrite: bool = ...): ...

def voxelize_mesh(mesh, binvoxer: Incomplete | None = ..., export_type: str = ..., **binvoxer_kwargs): ...
