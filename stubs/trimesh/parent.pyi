import abc
from . import caching as caching
from .util import ABC as ABC
from _typeshed import Incomplete

class Geometry(ABC, metaclass=abc.ABCMeta):
    @property
    @abc.abstractmethod
    def bounds(self): ...
    @property
    @abc.abstractmethod
    def extents(self): ...
    @abc.abstractmethod
    def apply_transform(self, matrix): ...
    @abc.abstractmethod
    def is_empty(self): ...
    def crc(self): ...
    def hash(self): ...
    def md5(self): ...
    def __hash__(self): ...
    @abc.abstractmethod
    def copy(self): ...
    @abc.abstractmethod
    def show(self): ...
    @abc.abstractmethod
    def __add__(self, other): ...
    @abc.abstractmethod
    def export(self, file_obj, file_type: Incomplete | None = ...): ...
    def apply_translation(self, translation): ...
    def apply_scale(self, scaling): ...
    def __radd__(self, other): ...

class Geometry3D(Geometry, metaclass=abc.ABCMeta):
    def bounding_box(self): ...
    def bounding_box_oriented(self): ...
    def bounding_sphere(self): ...
    def bounding_cylinder(self): ...
    def bounding_primitive(self): ...
    def apply_obb(self): ...
