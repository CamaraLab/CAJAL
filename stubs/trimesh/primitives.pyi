import abc
from . import caching as caching, creation as creation, inertia as inertia, sample as sample, triangles as triangles, util as util
from .base import Trimesh as Trimesh
from .constants import log as log, tol as tol
from _typeshed import Incomplete

class _Primitive(Trimesh, metaclass=abc.ABCMeta):
    __copy__: Incomplete
    __deepcopy__: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def faces(self): ...
    @faces.setter
    def faces(self, values) -> None: ...
    @property
    def vertices(self): ...
    @vertices.setter
    def vertices(self, values) -> None: ...
    @property
    def face_normals(self): ...
    @face_normals.setter
    def face_normals(self, values) -> None: ...
    @property
    def transform(self): ...
    @abc.abstractmethod
    def to_dict(self): ...
    def copy(self, **kwargs): ...
    def to_mesh(self): ...
    def apply_transform(self, matrix): ...

class _PrimitiveAttributes:
    def __init__(self, parent, defaults, kwargs) -> None: ...
    @property
    def __doc__(self): ...
    def __getattr__(self, key): ...
    def __setattr__(self, key, value): ...
    def __dir__(self): ...

class Cylinder(_Primitive):
    primitive: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def volume(self): ...
    def moment_inertia(self): ...
    def direction(self): ...
    @property
    def segment(self): ...
    def to_dict(self): ...
    def buffer(self, distance): ...

class Capsule(_Primitive):
    primitive: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def transform(self): ...
    def to_dict(self): ...
    def direction(self): ...

class Sphere(_Primitive):
    primitive: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value) -> None: ...
    def to_dict(self): ...
    @property
    def bounds(self): ...
    @property
    def bounding_box_oriented(self): ...
    def area(self): ...
    def volume(self): ...
    def moment_inertia(self): ...

class Box(_Primitive):
    primitive: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def to_dict(self): ...
    @property
    def transform(self): ...
    def sample_volume(self, count): ...
    def sample_grid(self, count: Incomplete | None = ..., step: Incomplete | None = ...): ...
    @property
    def is_oriented(self): ...
    def volume(self): ...
    def as_outline(self): ...

class Extrusion(_Primitive):
    triangle_args: Incomplete
    primitive: Incomplete
    def __init__(self, triangle_args: Incomplete | None = ..., *args, **kwargs) -> None: ...
    def area(self): ...
    def volume(self): ...
    def direction(self): ...
    @property
    def origin(self): ...
    @property
    def transform(self): ...
    def bounding_box_oriented(self): ...
    def slide(self, distance) -> None: ...
    def buffer(self, distance, distance_height: Incomplete | None = ..., **kwargs): ...
    def to_dict(self): ...
