import numpy as np
from .constants import log as log
from .util import is_sequence as is_sequence
from _typeshed import Incomplete
from collections.abc import Mapping

def sha256(item): ...
def hash_fallback(item): ...
hash_fallback = sha256
hash_fast = hash_fallback

def tracked_array(array, dtype: Incomplete | None = ...): ...
def cache_decorator(function): ...

class TrackedArray(np.ndarray):
    def __array_finalize__(self, obj) -> None: ...
    def __array_wrap__(self, out_arr, context: Incomplete | None = ...): ...
    @property
    def mutable(self): ...
    @mutable.setter
    def mutable(self, value) -> None: ...
    def hash(self): ...
    def crc(self): ...
    def md5(self): ...
    def __hash__(self): ...
    def __iadd__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __isub__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __imul__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __idiv__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __itruediv__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __imatmul__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __ipow__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __imod__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __ifloordiv__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __ilshift__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __irshift__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __iand__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __ixor__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __ior__(self, *args, **kwargs): # type: ignore[misc]
        ...
    def __setitem__(self, *args, **kwargs) -> None: ...
    def __setslice__(self, *args, **kwargs) -> None: ...

class Cache:
    force_immutable: Incomplete
    id_current: Incomplete
    cache: Incomplete
    def __init__(self, id_function, force_immutable: bool = ...) -> None: ...
    def delete(self, key) -> None: ...
    def verify(self) -> None: ...
    def clear(self, exclude: Incomplete | None = ...) -> None: ...
    def update(self, items) -> None: ...
    def id_set(self) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __contains__(self, key) -> bool: ...
    def __len__(self) -> int: ...
    def __enter__(self) -> None: ...
    def __exit__(self, *args) -> None: ...

class DiskCache:
    expire_days: Incomplete
    path: Incomplete
    def __init__(self, path, expire_days: int = ...) -> None: ...
    def get(self, key, fetch): ...

class DataStore(Mapping):
    data: Incomplete
    def __init__(self) -> None: ...
    def __iter__(self): ...
    def pop(self, key): ...
    def __delitem__(self, key) -> None: ...
    @property
    def mutable(self): ...
    @mutable.setter
    def mutable(self, value) -> None: ...
    def is_empty(self): ...
    def clear(self) -> None: ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, data) -> None: ...
    def __contains__(self, key) -> bool: ...
    def __len__(self) -> int: ...
    def update(self, values) -> None: ...
    def __hash__(self): ...
    def crc(self): ...
    def fast_hash(self): ...
    def hash(self): ...
