from _typeshed import Incomplete

class ContactData:
    names: Incomplete
    def __init__(self, names, contact) -> None: ...
    @property
    def normal(self): ...
    @property
    def point(self): ...
    @property
    def depth(self): ...
    def index(self, name): ...

class DistanceData:
    names: Incomplete
    def __init__(self, names, result) -> None: ...
    @property
    def distance(self): ...
    def index(self, name): ...
    def point(self, name): ...

class CollisionManager:
    def __init__(self) -> None: ...
    def add_object(self, name, mesh, transform: Incomplete | None = ...): ...
    def remove_object(self, name) -> None: ...
    def set_transform(self, name, transform) -> None: ...
    def in_collision_single(self, mesh, transform: Incomplete | None = ..., return_names: bool = ..., return_data: bool = ...): ...
    def in_collision_internal(self, return_names: bool = ..., return_data: bool = ...): ...
    def in_collision_other(self, other_manager, return_names: bool = ..., return_data: bool = ...): ...
    def min_distance_single(self, mesh, transform: Incomplete | None = ..., return_name: bool = ..., return_data: bool = ...): ...
    def min_distance_internal(self, return_names: bool = ..., return_data: bool = ...): ...
    def min_distance_other(self, other_manager, return_names: bool = ..., return_data: bool = ...): ...

def mesh_to_BVH(mesh): ...
def mesh_to_convex(mesh): ...
def scene_to_collision(scene): ...
