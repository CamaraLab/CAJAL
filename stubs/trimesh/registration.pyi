from . import bounds as bounds, exceptions as exceptions, transformations as transformations, util as util
from .geometry import weighted_vertex_normals as weighted_vertex_normals
from .points import PointCloud as PointCloud, plane_fit as plane_fit
from .transformations import transform_points as transform_points
from .triangles import angles as angles, cross as cross, normals as normals
from _typeshed import Incomplete

def mesh_other(mesh, other, samples: int = ..., scale: bool = ..., icp_first: int = ..., icp_final: int = ..., **kwargs): ...
def procrustes(a, b, weights: Incomplete | None = ..., reflection: bool = ..., translation: bool = ..., scale: bool = ..., return_cost: bool = ...): ...
def icp(a, b, initial=..., threshold: float = ..., max_iterations: int = ..., **kwargs): ...
def nricp_amberg(source_mesh, target_geometry, source_landmarks: Incomplete | None = ..., target_positions: Incomplete | None = ..., steps: Incomplete | None = ..., eps: float = ..., gamma: int = ..., distance_threshold: float = ..., return_records: bool = ..., use_faces: bool = ..., use_vertex_normals: bool = ..., neighbors_count: int = ...): ...
def nricp_sumner(source_mesh, target_geometry, source_landmarks: Incomplete | None = ..., target_positions: Incomplete | None = ..., steps: Incomplete | None = ..., distance_threshold: float = ..., return_records: bool = ..., use_faces: bool = ..., use_vertex_normals: bool = ..., neighbors_count: int = ..., face_pairs_type: str = ...): ...
