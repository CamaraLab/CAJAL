import abc
from . import creation as creation, polygons as polygons, raster as raster, repair as repair, segments as segments, simplify as simplify, traversal as traversal
from .. import bounds as bounds, caching as caching, exceptions as exceptions, grouping as grouping, parent as parent, units as units, util as util
from ..constants import log as log
from ..geometry import plane_transform as plane_transform
from ..points import plane_fit as plane_fit
from ..visual import to_rgba as to_rgba
from .exchange.export import export_path as export_path
from .util import concatenate as concatenate
from _typeshed import Incomplete

class Path(parent.Geometry, metaclass=abc.ABCMeta):
    metadata: Incomplete
    def __init__(self, entities: Incomplete | None = ..., vertices: Incomplete | None = ..., metadata: Incomplete | None = ..., process: bool = ..., colors: Incomplete | None = ..., **kwargs) -> None: ...
    def process(self): ...
    @property
    def colors(self): ...
    @colors.setter
    def colors(self, values) -> None: ...
    @property
    def vertices(self): ...
    @vertices.setter
    def vertices(self, values) -> None: ...
    @property
    def entities(self): ...
    @entities.setter
    def entities(self, values) -> None: ...
    @property
    def layers(self): ...
    def __hash__(self): ...
    def paths(self): ...
    def dangling(self): ...
    def kdtree(self): ...
    @property
    def scale(self): ...
    def length(self): ...
    def bounds(self): ...
    def centroid(self): ...
    @property
    def extents(self): ...
    @property
    def units(self): ...
    @units.setter
    def units(self, units) -> None: ...
    def convert_units(self, desired, guess: bool = ...) -> None: ...
    def explode(self) -> None: ...
    def fill_gaps(self, distance: float = ...) -> None: ...
    @property
    def is_closed(self): ...
    @property
    def is_empty(self): ...
    def vertex_graph(self): ...
    def vertex_nodes(self): ...
    def apply_transform(self, transform): ...
    def apply_layer(self, name) -> None: ...
    def rezero(self): ...
    def merge_vertices(self, digits: Incomplete | None = ...) -> None: ...
    def replace_vertex_references(self, mask) -> None: ...
    def remove_entities(self, entity_ids) -> None: ...
    def remove_invalid(self) -> None: ...
    def remove_duplicate_entities(self) -> None: ...
    def referenced_vertices(self): ...
    def remove_unreferenced_vertices(self) -> None: ...
    def discretize_path(self, path): ...
    def discrete(self): ...
    def export(self, file_obj: Incomplete | None = ..., file_type: Incomplete | None = ..., **kwargs): ...
    def to_dict(self): ...
    def copy(self): ...
    def scene(self): ...
    def __add__(self, other): ...

class Path3D(Path):
    def to_planar(self, to_2D: Incomplete | None = ..., normal: Incomplete | None = ..., check: bool = ...): ...
    def show(self, **kwargs): ...

class Path2D(Path):
    def show(self, annotations: bool = ...) -> None: ...
    def apply_obb(self): ...
    def apply_scale(self, scale): ...
    def obb(self): ...
    def rasterize(self, pitch, origin, resolution: Incomplete | None = ..., fill: bool = ..., width: Incomplete | None = ..., **kwargs): ...
    def sample(self, count, **kwargs): ...
    @property
    def body_count(self): ...
    def to_3D(self, transform: Incomplete | None = ...): ...
    def polygons_closed(self): ...
    def polygons_full(self): ...
    def area(self): ...
    def extrude(self, height, **kwargs): ...
    def triangulate(self, **kwargs): ...
    def medial_axis(self, resolution: Incomplete | None = ..., clip: Incomplete | None = ...): ...
    def connected_paths(self, path_id, include_self: bool = ...): ...
    def simplify(self, **kwargs): ...
    def simplify_spline(self, smooth: float = ..., verbose: bool = ...): ...
    def split(self, **kwargs): ...
    def plot_discrete(self, show: bool = ..., annotations: bool = ...): ...
    def plot_entities(self, show: bool = ..., annotations: bool = ..., color: Incomplete | None = ...) -> None: ...
    @property
    def identifier(self): ...
    def identifier_hash(self): ...
    @property
    def identifier_md5(self): ...
    @property
    def path_valid(self): ...
    def root(self): ...
    def enclosure(self): ...
    def enclosure_directed(self): ...
    def enclosure_shell(self): ...
