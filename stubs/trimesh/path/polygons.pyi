from .. import bounds as bounds, geometry as geometry, graph as graph, grouping as grouping
from ..constants import log as log
from ..exceptions import ExceptionModule as ExceptionModule, closure as closure
from ..transformations import transform_points as transform_points
from .simplify import fit_circle_check as fit_circle_check
from .traversal import resample_path as resample_path
from _typeshed import Incomplete

def enclosure_tree(polygons): ...
def edges_to_polygons(edges, vertices): ...
def polygons_obb(polygons): ...
def polygon_obb(polygon): ...
def transform_polygon(polygon, matrix): ...
def plot(polygon, show: bool = ..., axes: Incomplete | None = ..., **kwargs): ...
def resample_boundaries(polygon, resolution, clip: Incomplete | None = ...): ...
def stack_boundaries(boundaries): ...
def medial_axis(polygon, resolution: Incomplete | None = ..., clip: Incomplete | None = ...): ...
def polygon_hash(polygon): ...
def random_polygon(segments: int = ..., radius: float = ...): ...
def polygon_scale(polygon): ...
def paths_to_polygons(paths, scale: Incomplete | None = ...): ...
def sample(polygon, count, factor: float = ..., max_iter: int = ...): ...
def repair_invalid(polygon, scale: Incomplete | None = ..., rtol: float = ...): ...
def projected(mesh, normal, origin: Incomplete | None = ..., ignore_sign: bool = ..., rpad: float = ..., apad: Incomplete | None = ..., tol_dot: float = ..., max_regions: int = ...): ...
def second_moment(coords): ...
