from .. import util as util
from ..util import ABC as ABC
from .arc import arc_center as arc_center, discretize_arc as discretize_arc
from .curve import discretize_bezier as discretize_bezier, discretize_bspline as discretize_bspline
from _typeshed import Incomplete

class Entity(ABC):
    points: Incomplete
    color: Incomplete
    kwargs: Incomplete
    def __init__(self, points, closed: Incomplete | None = ..., layer: Incomplete | None = ..., metadata: Incomplete | None = ..., color: Incomplete | None = ..., **kwargs) -> None: ...
    @property
    def metadata(self): ...
    @property
    def layer(self): ...
    @layer.setter
    def layer(self, value) -> None: ...
    def to_dict(self): ...
    @property
    def closed(self): ...
    @property
    def nodes(self): ...
    @property
    def end_points(self): ...
    @property
    def is_valid(self): ...
    def reverse(self, direction: int = ...) -> None: ...
    def bounds(self, vertices): ...
    def length(self, vertices): ...
    def explode(self): ...
    def copy(self): ...
    def __hash__(self): ...

class Text(Entity):
    height: Incomplete
    layer: Incomplete
    color: Incomplete
    align: Incomplete
    text: Incomplete
    points: Incomplete
    def __init__(self, origin, text, height: Incomplete | None = ..., vector: Incomplete | None = ..., normal: Incomplete | None = ..., align: Incomplete | None = ..., layer: Incomplete | None = ..., color: Incomplete | None = ..., metadata: Incomplete | None = ...) -> None: ...
    @property
    def origin(self): ...

    @origin.setter
    def origin(self, value) -> None: ...
    @property
    def vector(self): ...
    @vector.setter
    def vector(self, value) -> None: ...
    @property
    def normal(self): ...
    @normal.setter
    def normal(self, value) -> None: ...
    def plot(self, vertices, show: bool = ...) -> None: ...
    def angle(self, vertices): ...
    def length(self, vertices): ...
    def discrete(self, *args, **kwargs): ...
    @property
    def closed(self): ...
    @property
    def is_valid(self): ...
    @property
    def nodes(self): ...
    @property
    def end_points(self): ...

class Line(Entity):
    def discrete(self, vertices, scale: float = ...): ...
    @property
    def is_valid(self): ...
    def explode(self): ...

class Arc(Entity):
    @property
    def closed(self): ...
    @closed.setter
    def closed(self, value) -> None: ...
    @property
    def is_valid(self): ...
    def length(self, vertices): ...
    def discrete(self, vertices, scale: float = ...): ...
    def center(self, vertices, **kwargs): ...
    def bounds(self, vertices): ...

class Curve(Entity):
    @property
    def nodes(self): ...

class Bezier(Curve):
    def discrete(self, vertices, scale: float = ..., count: Incomplete | None = ...): ...

class BSpline(Curve):
    points: Incomplete
    knots: Incomplete
    layer: Incomplete
    kwargs: Incomplete
    color: Incomplete
    def __init__(self, points, knots, layer: Incomplete | None = ..., metadata: Incomplete | None = ..., color: Incomplete | None = ..., **kwargs) -> None: ...
    def discrete(self, vertices, count: Incomplete | None = ..., scale: float = ...): ...
    def to_dict(self): ...
