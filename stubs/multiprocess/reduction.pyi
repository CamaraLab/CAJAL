import pickle
from _typeshed import Incomplete
from abc import ABCMeta

class ForkingPickler(pickle.Pickler):
    dispatch_table: Incomplete
    def __init__(self, *args, **kwds) -> None: ...
    @classmethod
    def register(cls, type, reduce) -> None: ...
    @classmethod
    def dumps(cls, obj, protocol: Incomplete | None = ..., *args, **kwds): ...
    loads: Incomplete

register: Incomplete

def dump(obj, file, protocol: Incomplete | None = ..., *args, **kwds) -> None: ...
def sendfds(sock, fds) -> None: ...
def recvfds(sock, size): ...
def send_handle(conn, handle, destination_pid) -> None: ...
def recv_handle(conn): ...
def DupFd(fd): ...

class _C:
    def f(self) -> None: ...

class AbstractReducer(metaclass=ABCMeta):
    ForkingPickler: Incomplete
    register: Incomplete
    dump: Incomplete
    send_handle: Incomplete
    recv_handle: Incomplete
    sendfds: Incomplete
    recvfds: Incomplete
    DupFd: Incomplete
    def __init__(self, *args) -> None: ...
