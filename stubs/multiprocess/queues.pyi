from _typeshed import Incomplete

class Queue:
    def __init__(self, maxsize: int = ..., *, ctx) -> None: ...
    def put(self, obj, block: bool = ..., timeout: Incomplete | None = ...) -> None: ...
    def get(self, block: bool = ..., timeout: Incomplete | None = ...): ...
    def qsize(self): ...
    def empty(self): ...
    def full(self): ...
    def get_nowait(self): ...
    def put_nowait(self, obj): ...
    def close(self) -> None: ...
    def join_thread(self) -> None: ...
    def cancel_join_thread(self) -> None: ...

class JoinableQueue(Queue):
    def __init__(self, maxsize: int = ..., *, ctx) -> None: ...
    def put(self, obj, block: bool = ..., timeout: Incomplete | None = ...) -> None: ...
    def task_done(self) -> None: ...
    def join(self) -> None: ...

class SimpleQueue:
    def __init__(self, *, ctx) -> None: ...
    def close(self) -> None: ...
    def empty(self): ...
    def get(self): ...
    def put(self, obj) -> None: ...
    __class_getitem__: Incomplete
