from _typeshed import Incomplete

class _ConnectionBase:
    def __init__(self, handle, readable: bool = ..., writable: bool = ...) -> None: ...
    def __del__(self) -> None: ...
    @property
    def closed(self): ...
    @property
    def readable(self): ...
    @property
    def writable(self): ...
    def fileno(self): ...
    def close(self) -> None: ...
    def send_bytes(self, buf, offset: int = ..., size: Incomplete | None = ...) -> None: ...
    def send(self, obj) -> None: ...
    def recv_bytes(self, maxlength: Incomplete | None = ...): ...
    def recv_bytes_into(self, buf, offset: int = ...): ...
    def recv(self): ...
    def poll(self, timeout: float = ...): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, exc_tb) -> None: ...

class PipeConnection(_ConnectionBase): ...
class Connection(_ConnectionBase): ...

class Listener:
    def __init__(self, address: Incomplete | None = ..., family: Incomplete | None = ..., backlog: int = ..., authkey: Incomplete | None = ...) -> None: ...
    def accept(self): ...
    def close(self) -> None: ...
    @property
    def address(self): ...
    @property
    def last_accepted(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, exc_tb) -> None: ...

def Client(address, family: Incomplete | None = ..., authkey: Incomplete | None = ...): ...
def Pipe(duplex: bool = ...): ...

class SocketListener:
    def __init__(self, address, family, backlog: int = ...) -> None: ...
    def accept(self): ...
    def close(self) -> None: ...

class ConnectionWrapper:
    def __init__(self, conn, dumps, loads) -> None: ...
    def send(self, obj) -> None: ...
    def recv(self): ...

class XmlListener(Listener):
    def accept(self): ...

def wait(object_list, timeout: Incomplete | None = ...): ...
