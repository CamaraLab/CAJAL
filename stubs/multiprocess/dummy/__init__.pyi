import threading
from .connection import Pipe as Pipe
from _typeshed import Incomplete
from queue import Queue as Queue
from threading import Barrier as Barrier, BoundedSemaphore as BoundedSemaphore, Condition as Condition, Event as Event, Lock as Lock, RLock as RLock, Semaphore as Semaphore

class DummyProcess(threading.Thread):
    def __init__(self, group: Incomplete | None = ..., target: Incomplete | None = ..., name: Incomplete | None = ..., args=..., kwargs=...) -> None: ...
    def start(self) -> None: ...
    @property
    def exitcode(self): ...
Process = DummyProcess
current_process = threading.current_thread

def active_children(): ...
def freeze_support() -> None: ...

class Namespace:
    def __init__(self, **kwds) -> None: ...
dict = dict
list = list

class Value:
    def __init__(self, typecode, value, lock: bool = ...) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, value) -> None: ...

def Manager(): ...
def Pool(processes: Incomplete | None = ..., initializer: Incomplete | None = ..., initargs=...): ...
JoinableQueue = Queue
