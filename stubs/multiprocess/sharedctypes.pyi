from _typeshed import Incomplete

def RawValue(typecode_or_type, *args): ...
def RawArray(typecode_or_type, size_or_initializer): ...
def Value(typecode_or_type, *args, lock: bool = ..., ctx: Incomplete | None = ...): ...
def Array(typecode_or_type, size_or_initializer, *, lock: bool = ..., ctx: Incomplete | None = ...): ...
def copy(obj): ...
def synchronized(obj, lock: Incomplete | None = ..., ctx: Incomplete | None = ...): ...

class SynchronizedBase:
    acquire: Incomplete
    release: Incomplete
    def __init__(self, obj, lock: Incomplete | None = ..., ctx: Incomplete | None = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...
    def __reduce__(self): ...
    def get_obj(self): ...
    def get_lock(self): ...

class Synchronized(SynchronizedBase):
    value: Incomplete

class SynchronizedArray(SynchronizedBase):
    def __len__(self) -> int: ...
    def __getitem__(self, i): ...
    def __setitem__(self, i, value) -> None: ...
    def __getslice__(self, start, stop): ...
    def __setslice__(self, start, stop, values) -> None: ...

class SynchronizedString(SynchronizedArray):
    value: Incomplete
    raw: Incomplete
