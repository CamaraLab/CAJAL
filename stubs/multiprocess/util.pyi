import threading
from _typeshed import Incomplete

SUBDEBUG: int
SUBWARNING: int

def sub_debug(msg, *args) -> None: ...
def debug(msg, *args) -> None: ...
def info(msg, *args) -> None: ...
def sub_warning(msg, *args) -> None: ...
def get_logger(): ...
def log_to_stderr(level: Incomplete | None = ...): ...
def get_temp_dir(): ...
def register_after_fork(obj, func) -> None: ...

class Finalize:
    def __init__(self, obj, callback, args=..., kwargs: Incomplete | None = ..., exitpriority: Incomplete | None = ...) -> None: ...
    def __call__(self, wr: Incomplete | None = ..., _finalizer_registry=..., sub_debug=..., getpid=...): ...
    def cancel(self) -> None: ...
    def still_active(self): ...

def is_exiting(): ...

class ForkAwareThreadLock:
    acquire: Incomplete
    release: Incomplete
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args): ...

class ForkAwareLocal(threading.local):
    def __init__(self) -> None: ...
    def __reduce__(self): ...

def close_all_fds_except(fds) -> None: ...
