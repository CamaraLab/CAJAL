from . import process as process, reduction as reduction
from _typeshed import Incomplete

class ProcessError(Exception): ...
class BufferTooShort(ProcessError): ...
class TimeoutError(ProcessError): ...
class AuthenticationError(ProcessError): ...

class BaseContext:
    ProcessError: Incomplete
    BufferTooShort: Incomplete
    TimeoutError: Incomplete
    AuthenticationError: Incomplete
    current_process: Incomplete
    parent_process: Incomplete
    active_children: Incomplete
    def cpu_count(self): ...
    def Manager(self): ...
    def Pipe(self, duplex: bool = ...): ...
    def Lock(self): ...
    def RLock(self): ...
    def Condition(self, lock: Incomplete | None = ...): ...
    def Semaphore(self, value: int = ...): ...
    def BoundedSemaphore(self, value: int = ...): ...
    def Event(self): ...
    def Barrier(self, parties, action: Incomplete | None = ..., timeout: Incomplete | None = ...): ...
    def Queue(self, maxsize: int = ...): ...
    def JoinableQueue(self, maxsize: int = ...): ...
    def SimpleQueue(self): ...
    def Pool(self, processes: Incomplete | None = ..., initializer: Incomplete | None = ..., initargs=..., maxtasksperchild: Incomplete | None = ...): ...
    def RawValue(self, typecode_or_type, *args): ...
    def RawArray(self, typecode_or_type, size_or_initializer): ...
    def Value(self, typecode_or_type, *args, lock: bool = ...): ...
    def Array(self, typecode_or_type, size_or_initializer, *, lock: bool = ...): ...
    def freeze_support(self) -> None: ...
    def get_logger(self): ...
    def log_to_stderr(self, level: Incomplete | None = ...): ...
    def allow_connection_pickling(self) -> None: ...
    def set_executable(self, executable) -> None: ...
    def set_forkserver_preload(self, module_names) -> None: ...
    def get_context(self, method: Incomplete | None = ...): ...
    def get_start_method(self, allow_none: bool = ...): ...
    def set_start_method(self, method, force: bool = ...) -> None: ...
    @property
    def reducer(self): ...
    @reducer.setter
    def reducer(self, reduction) -> None: ...

class Process(process.BaseProcess): ...

class DefaultContext(BaseContext):
    Process: Incomplete
    def __init__(self, context) -> None: ...
    def get_context(self, method: Incomplete | None = ...): ...
    def set_start_method(self, method, force: bool = ...) -> None: ...
    def get_start_method(self, allow_none: bool = ...): ...
    def get_all_start_methods(self): ...

class ForkProcess(process.BaseProcess): ...
class SpawnProcess(process.BaseProcess): ...
class ForkServerProcess(process.BaseProcess): ...

class ForkContext(BaseContext):
    Process: Incomplete

class SpawnContext(BaseContext):
    Process: Incomplete

class ForkServerContext(BaseContext):
    Process: Incomplete

def get_spawning_popen(): ...
def set_spawning_popen(popen) -> None: ...
def assert_spawning(obj) -> None: ...
