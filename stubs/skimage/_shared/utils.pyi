from ._warnings import all_warnings as all_warnings, warn as warn
from _typeshed import Incomplete

class skimage_deprecation(Warning): ...

class _DecoratorBaseClass:
    def get_stack_length(self, func): ...

class change_default_value(_DecoratorBaseClass):
    arg_name: Incomplete
    new_value: Incomplete
    warning_msg: Incomplete
    changed_version: Incomplete
    def __init__(self, arg_name, *, new_value, changed_version, warning_msg: Incomplete | None = ...) -> None: ...
    def __call__(self, func): ...

class remove_arg(_DecoratorBaseClass):
    arg_name: Incomplete
    help_msg: Incomplete
    changed_version: Incomplete
    def __init__(self, arg_name, *, changed_version, help_msg: Incomplete | None = ...) -> None: ...
    def __call__(self, func): ...

class deprecate_kwarg(_DecoratorBaseClass):
    kwarg_mapping: Incomplete
    warning_msg: str
    deprecated_version: Incomplete
    def __init__(self, kwarg_mapping, deprecated_version, warning_msg: Incomplete | None = ..., removed_version: Incomplete | None = ...) -> None: ...
    def __call__(self, func): ...

class deprecate_multichannel_kwarg(deprecate_kwarg):
    position: Incomplete
    def __init__(self, removed_version: str = ..., multichannel_position: Incomplete | None = ...) -> None: ...
    def __call__(self, func): ...

class channel_as_last_axis:
    arg_positions: Incomplete
    kwarg_names: Incomplete
    multichannel_output: Incomplete
    def __init__(self, channel_arg_positions=..., channel_kwarg_names=..., multichannel_output: bool = ...) -> None: ...
    def __call__(self, func): ...

class deprecated:
    alt_func: Incomplete
    behavior: Incomplete
    removed_version: Incomplete
    def __init__(self, alt_func: Incomplete | None = ..., behavior: str = ..., removed_version: Incomplete | None = ...) -> None: ...
    def __call__(self, func): ...

def get_bound_method_class(m): ...
def safe_as_int(val, atol: float = ...): ...
def check_shape_equality(im1, im2) -> None: ...
def slice_at_axis(sl, axis): ...
def reshape_nd(arr, ndim, dim): ...
def check_nD(array, ndim, arg_name: str = ...) -> None: ...
def identity(image, *args, **kwargs): ...
