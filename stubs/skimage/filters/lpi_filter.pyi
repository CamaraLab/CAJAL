from .._shared.utils import check_nD as check_nD
from _typeshed import Incomplete

class LPIFilter2D:
    impulse_response: Incomplete
    filter_params: Incomplete
    def __init__(self, impulse_response, **filter_params) -> None: ...
    def __call__(self, data): ...

def forward(data, impulse_response: Incomplete | None = ..., filter_params=..., predefined_filter: Incomplete | None = ...): ...
def inverse(data, impulse_response: Incomplete | None = ..., filter_params=..., max_gain: int = ..., predefined_filter: Incomplete | None = ...): ...
def wiener(data, impulse_response: Incomplete | None = ..., filter_params=..., K: float = ..., predefined_filter: Incomplete | None = ...): ...
def constrained_least_squares(data, lam, impulse_response: Incomplete | None = ..., filter_params=...) -> None: ...
