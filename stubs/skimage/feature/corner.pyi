from .._shared.filters import gaussian as gaussian
from .._shared.utils import safe_as_int as safe_as_int
from ..transform import integral_image as integral_image
from ..util import img_as_float as img_as_float
from .peak import peak_local_max as peak_local_max
from _typeshed import Incomplete

def structure_tensor(image, sigma: int = ..., mode: str = ..., cval: int = ..., order: Incomplete | None = ...): ...
def hessian_matrix(image, sigma: int = ..., mode: str = ..., cval: int = ..., order: str = ...): ...
def hessian_matrix_det(image, sigma: int = ..., approximate: bool = ...): ...
def structure_tensor_eigenvalues(A_elems): ...
def structure_tensor_eigvals(Axx, Axy, Ayy): ...
def hessian_matrix_eigvals(H_elems): ...
def shape_index(image, sigma: int = ..., mode: str = ..., cval: int = ...): ...
def corner_kitchen_rosenfeld(image, mode: str = ..., cval: int = ...): ...
def corner_harris(image, method: str = ..., k: float = ..., eps: float = ..., sigma: int = ...): ...
def corner_shi_tomasi(image, sigma: int = ...): ...
def corner_foerstner(image, sigma: int = ...): ...
def corner_fast(image, n: int = ..., threshold: float = ...): ...
def corner_subpix(image, corners, window_size: int = ..., alpha: float = ...): ...
def corner_peaks(image, min_distance: int = ..., threshold_abs: Incomplete | None = ..., threshold_rel: Incomplete | None = ..., exclude_border: bool = ..., indices: bool = ..., num_peaks=..., footprint: Incomplete | None = ..., labels: Incomplete | None = ..., *, num_peaks_per_label=..., p_norm=...): ...
def corner_moravec(image, window_size: int = ...): ...
def corner_orientations(image, corners, mask): ...
