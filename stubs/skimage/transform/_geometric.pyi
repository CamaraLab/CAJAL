from .._shared.utils import get_bound_method_class as get_bound_method_class, safe_as_int as safe_as_int
from _typeshed import Incomplete

class GeometricTransform:
    def __call__(self, coords) -> None: ...
    def inverse(self, coords) -> None: ...
    def residuals(self, src, dst): ...
    def __add__(self, other) -> None: ...

class FundamentalMatrixTransform(GeometricTransform):
    params: Incomplete
    def __init__(self, matrix: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def __call__(self, coords): ...
    def inverse(self, coords): ...
    def estimate(self, src, dst): ...
    def residuals(self, src, dst): ...

class EssentialMatrixTransform(FundamentalMatrixTransform):
    params: Incomplete
    def __init__(self, rotation: Incomplete | None = ..., translation: Incomplete | None = ..., matrix: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def estimate(self, src, dst): ...

class ProjectiveTransform(GeometricTransform):
    params: Incomplete
    def __init__(self, matrix: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def __array__(self, dtype: Incomplete | None = ...): ...
    def __call__(self, coords): ...
    def inverse(self, coords): ...
    def estimate(self, src, dst, weights: Incomplete | None = ...): ...
    def __add__(self, other): ...
    def __nice__(self): ...
    @property
    def dimensionality(self): ...

class AffineTransform(ProjectiveTransform):
    params: Incomplete
    def __init__(self, matrix: Incomplete | None = ..., scale: Incomplete | None = ..., rotation: Incomplete | None = ..., shear: Incomplete | None = ..., translation: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    @property
    def scale(self): ...
    @property
    def rotation(self): ...
    @property
    def shear(self): ...
    @property
    def translation(self): ...

class PiecewiseAffineTransform(GeometricTransform):
    affines: Incomplete
    inverse_affines: Incomplete
    def __init__(self) -> None: ...
    def estimate(self, src, dst): ...
    def __call__(self, coords): ...
    def inverse(self, coords): ...

class EuclideanTransform(ProjectiveTransform):
    params: Incomplete
    def __init__(self, matrix: Incomplete | None = ..., rotation: Incomplete | None = ..., translation: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def estimate(self, src, dst): ...
    @property
    def rotation(self): ...
    @property
    def translation(self): ...

class SimilarityTransform(EuclideanTransform):
    params: Incomplete
    def __init__(self, matrix: Incomplete | None = ..., scale: Incomplete | None = ..., rotation: Incomplete | None = ..., translation: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def estimate(self, src, dst): ...
    @property
    def scale(self): ...

class PolynomialTransform(GeometricTransform):
    params: Incomplete
    def __init__(self, params: Incomplete | None = ..., *, dimensionality: int = ...) -> None: ...
    def estimate(self, src, dst, order: int = ..., weights: Incomplete | None = ...): ...
    def __call__(self, coords): ...
    def inverse(self, coords) -> None: ...

TRANSFORMS: Incomplete

def estimate_transform(ttype, src, dst, *args, **kwargs): ...
def matrix_transform(coords, matrix): ...
