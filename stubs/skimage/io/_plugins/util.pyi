import threading
from ...util import img_as_ubyte as img_as_ubyte
from _typeshed import Incomplete

CPU_COUNT: Incomplete

class GuiLockError(Exception):
    msg: Incomplete
    def __init__(self, msg) -> None: ...

class WindowManager:
    def __init__(self) -> None: ...
    def acquire(self, kit) -> None: ...
    def add_window(self, win) -> None: ...
    def remove_window(self, win) -> None: ...
    def register_callback(self, cb, *cbargs, **cbkwargs) -> None: ...
    def has_windows(self): ...

window_manager: Incomplete

def prepare_for_display(npy_img): ...
def histograms(image, nbins): ...

class ImgThread(threading.Thread):
    func: Incomplete
    args: Incomplete
    def __init__(self, func, *args) -> None: ...
    def run(self) -> None: ...

class ThreadDispatch:
    cores: Incomplete
    threads: Incomplete
    chunks: Incomplete
    def __init__(self, img, stateimg, func, *args) -> None: ...
    def run(self) -> None: ...

class ColorMixer:
    RED: int
    GREEN: int
    BLUE: int
    valid_channels: Incomplete
    img: Incomplete
    origimg: Incomplete
    stateimg: Incomplete
    def __init__(self, img) -> None: ...
    def get_stateimage(self): ...
    def commit_changes(self) -> None: ...
    def revert(self) -> None: ...
    def set_to_stateimg(self) -> None: ...
    def add(self, channel, ammount) -> None: ...
    def multiply(self, channel, ammount) -> None: ...
    def brightness(self, factor, offset) -> None: ...
    def sigmoid_gamma(self, alpha, beta) -> None: ...
    def gamma(self, gamma) -> None: ...
    def hsv_add(self, h_amt, s_amt, v_amt) -> None: ...
    def hsv_multiply(self, h_amt, s_amt, v_amt) -> None: ...
    def rgb_2_hsv_pixel(self, R, G, B): ...
    def hsv_2_rgb_pixel(self, H, S, V): ...
