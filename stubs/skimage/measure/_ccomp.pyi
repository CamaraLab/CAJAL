from typing import Any

from typing import overload
import numpy

class DTYPE(numpy.signedinteger):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @overload
    def bit_count(self) -> int: ...
    @overload
    def bit_count(self) -> Any: ...
    @overload
    def bit_count(self) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __and__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __index__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __invert__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lshift__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rand__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rlshift__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __ror__(self, other) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rrshift__(self, other) -> Any: ...
    def __rshift__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __rxor__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __xor__(self, other) -> Any: ...

def _apply_swaps(*args, **kwargs) -> Any: ...
def _get_swaps(*args, **kwargs) -> Any: ...
def label_cython(*args, **kwargs) -> Any: ...
def reshape_array(*args, **kwargs) -> Any: ...
def undo_reshape_array(*args, **kwargs) -> Any: ...
def warn(*args, **kwargs) -> Any: ...
