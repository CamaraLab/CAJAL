from _typeshed import Incomplete

class BaseModel:
    params: Incomplete
    def __init__(self) -> None: ...

class LineModelND(BaseModel):
    params: Incomplete
    def estimate(self, data): ...
    def residuals(self, data, params: Incomplete | None = ...): ...
    def predict(self, x, axis: int = ..., params: Incomplete | None = ...): ...
    def predict_x(self, y, params: Incomplete | None = ...): ...
    def predict_y(self, x, params: Incomplete | None = ...): ...

class CircleModel(BaseModel):
    params: Incomplete
    def estimate(self, data): ...
    def residuals(self, data): ...
    def predict_xy(self, t, params: Incomplete | None = ...): ...

class EllipseModel(BaseModel):
    params: Incomplete
    def estimate(self, data): ...
    def residuals(self, data): ...
    def predict_xy(self, t, params: Incomplete | None = ...): ...

def ransac(data, model_class, min_samples, residual_threshold, is_data_valid: Incomplete | None = ..., is_model_valid: Incomplete | None = ..., max_trials: int = ..., stop_sample_num=..., stop_residuals_sum: int = ..., stop_probability: int = ..., random_state: Incomplete | None = ..., initial_inliers: Incomplete | None = ...): ...
