import networkx as nx
from ... import color as color, measure as measure, segmentation as segmentation, util as util
from ..._shared.version_requirements import require as require
from _typeshed import Incomplete

def min_weight(graph, src, dst, n): ...

class RAG(nx.Graph):
    max_id: int
    def __init__(self, label_image: Incomplete | None = ..., connectivity: int = ..., data: Incomplete | None = ..., **attr) -> None: ...
    def merge_nodes(self, src, dst, weight_func=..., in_place: bool = ..., extra_arguments=..., extra_keywords=...): ...
    def add_node(self, n, attr_dict: Incomplete | None = ..., **attr) -> None: ...
    def add_edge(self, u, v, attr_dict: Incomplete | None = ..., **attr) -> None: ...
    def copy(self): ...
    def fresh_copy(self): ...
    def next_id(self): ...

def rag_mean_color(image, labels, connectivity: int = ..., mode: str = ..., sigma: float = ...): ...
def rag_boundary(labels, edge_map, connectivity: int = ...): ...
def show_rag(labels, rag, image, border_color: str = ..., edge_width: float = ..., edge_cmap: str = ..., img_cmap: str = ..., in_place: bool = ..., ax: Incomplete | None = ...): ...
