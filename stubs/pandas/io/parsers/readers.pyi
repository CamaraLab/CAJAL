import csv
import pandas._libs.lib as lib
from _typeshed import Incomplete
from collections import abc
from pandas._libs.parsers import STR_NA_VALUES as STR_NA_VALUES
from pandas._typing import CSVEngine as CSVEngine, CompressionOptions as CompressionOptions, DtypeArg as DtypeArg, FilePath as FilePath, IndexLabel as IndexLabel, ReadCsvBuffer as ReadCsvBuffer, StorageOptions as StorageOptions
from pandas.core.dtypes.common import is_file_like as is_file_like, is_float as is_float, is_integer as is_integer, is_list_like as is_list_like
from pandas.core.frame import DataFrame as DataFrame
from pandas.core.indexes.api import RangeIndex as RangeIndex
from pandas.errors import AbstractMethodError as AbstractMethodError, ParserWarning as ParserWarning
from pandas.io.common import IOHandles as IOHandles, get_handle as get_handle, stringify_path as stringify_path, validate_header_arg as validate_header_arg
from pandas.io.parsers.arrow_parser_wrapper import ArrowParserWrapper as ArrowParserWrapper
from pandas.io.parsers.base_parser import ParserBase as ParserBase, is_index_col as is_index_col, parser_defaults as parser_defaults
from pandas.io.parsers.c_parser_wrapper import CParserWrapper as CParserWrapper
from pandas.io.parsers.python_parser import FixedWidthFieldParser as FixedWidthFieldParser, PythonParser as PythonParser
from pandas.util._decorators import Appender as Appender, deprecate_kwarg as deprecate_kwarg, deprecate_nonkeyword_arguments as deprecate_nonkeyword_arguments
from pandas.util._exceptions import find_stack_level as find_stack_level
from pandas.util._validators import validate_bool_kwarg as validate_bool_kwarg
from typing import Any, Hashable, Literal, NamedTuple, Sequence, overload

class _DeprecationConfig(NamedTuple):
    default_value: Any
    msg: Union[str, None]


@overload
def validate_integer(name, val: None, min_val=...) -> None: ...
@overload
def validate_integer(name, val: float, min_val=...) -> int: ...
@overload
def validate_integer(name, val: Union[int, None], min_val=...) -> Union[int, None]: ...
@overload
def read_csv(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: Literal[True], chunksize: Union[int, None] = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace: bool = ..., low_memory=..., memory_map: bool = ..., float_precision: Union[Literal['high', 'legacy'], None] = ..., storage_options: StorageOptions = ...) -> TextFileReader: ...
@overload
def read_csv(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: bool = ..., chunksize: int, compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace: bool = ..., low_memory=..., memory_map: bool = ..., float_precision: Union[Literal['high', 'legacy'], None] = ..., storage_options: StorageOptions = ...) -> TextFileReader: ...
@overload
def read_csv(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: Literal[False] = ..., chunksize: None = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace: bool = ..., low_memory=..., memory_map: bool = ..., float_precision: Union[Literal['high', 'legacy'], None] = ..., storage_options: StorageOptions = ...) -> DataFrame: ...
@overload
def read_csv(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: bool = ..., chunksize: Union[int, None] = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace: bool = ..., low_memory=..., memory_map: bool = ..., float_precision: Union[Literal['high', 'legacy'], None] = ..., storage_options: StorageOptions = ...) -> Union[DataFrame, TextFileReader]: ...
@overload
def read_table(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: Literal[True], chunksize: Union[int, None] = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace=..., low_memory=..., memory_map: bool = ..., float_precision: Union[str, None] = ..., storage_options: StorageOptions = ...) -> TextFileReader: ...
@overload
def read_table(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: bool = ..., chunksize: int, compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace=..., low_memory=..., memory_map: bool = ..., float_precision: Union[str, None] = ..., storage_options: StorageOptions = ...) -> TextFileReader: ...
@overload
def read_table(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: Literal[False] = ..., chunksize: None = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace=..., low_memory=..., memory_map: bool = ..., float_precision: Union[str, None] = ..., storage_options: StorageOptions = ...) -> DataFrame: ...
@overload
def read_table(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], *, sep: Union[str, None, lib.NoDefault] = ..., delimiter: Union[str, None, lib.NoDefault] = ..., header: Union[int, Sequence[int], None, Literal['infer']] = ..., names: Union[Sequence[Hashable], None, lib.NoDefault] = ..., index_col: Union[IndexLabel, Literal[False], None] = ..., usecols=..., squeeze: Union[bool, None] = ..., prefix: Union[str, lib.NoDefault] = ..., mangle_dupe_cols: bool = ..., dtype: Union[DtypeArg, None] = ..., engine: Union[CSVEngine, None] = ..., converters=..., true_values=..., false_values=..., skipinitialspace: bool = ..., skiprows=..., skipfooter: int = ..., nrows: Union[int, None] = ..., na_values=..., keep_default_na: bool = ..., na_filter: bool = ..., verbose: bool = ..., skip_blank_lines: bool = ..., parse_dates=..., infer_datetime_format: bool = ..., keep_date_col: bool = ..., date_parser=..., dayfirst: bool = ..., cache_dates: bool = ..., iterator: bool = ..., chunksize: Union[int, None] = ..., compression: CompressionOptions = ..., thousands: Union[str, None] = ..., decimal: str = ..., lineterminator: Union[str, None] = ..., quotechar: str = ..., quoting: int = ..., doublequote: bool = ..., escapechar: Union[str, None] = ..., comment: Union[str, None] = ..., encoding: Union[str, None] = ..., encoding_errors: Union[str, None] = ..., dialect: Union[str, csv.Dialect, None] = ..., error_bad_lines: Union[bool, None] = ..., warn_bad_lines: Union[bool, None] = ..., on_bad_lines=..., delim_whitespace=..., low_memory=..., memory_map: bool = ..., float_precision: Union[str, None] = ..., storage_options: StorageOptions = ...) -> Union[DataFrame, TextFileReader]: ...
def read_fwf(filepath_or_buffer: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str]], colspecs: Union[Sequence[tuple[int, int]], str, None] = ..., widths: Union[Sequence[int], None] = ..., infer_nrows: int = ..., **kwds) -> Union[DataFrame, TextFileReader]: ...

class TextFileReader(abc.Iterator):
    engine: Incomplete
    orig_options: Incomplete
    chunksize: Incomplete
    nrows: Incomplete
    squeeze: Incomplete
    handles: Incomplete
    def __init__(self, f: Union[FilePath, ReadCsvBuffer[bytes], ReadCsvBuffer[str], list], engine: Union[CSVEngine, None] = ..., **kwds) -> None: ...
    def close(self) -> None: ...
    def __next__(self) -> DataFrame: ...
    def read(self, nrows: Union[int, None] = ...) -> DataFrame: ...
    def get_chunk(self, size: Union[int, None] = ...) -> DataFrame: ...
    def __enter__(self) -> TextFileReader: ...
    def __exit__(self, exc_type, exc_value, traceback) -> None: ...

def TextParser(*args, **kwds) -> TextFileReader: ...

MANDATORY_DIALECT_ATTRS: Incomplete
