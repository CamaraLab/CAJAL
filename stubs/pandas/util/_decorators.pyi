from _typeshed import Incomplete
from pandas._libs.properties import cache_readonly as cache_readonly
from pandas._typing import F, T
from typing import Any, Callable, Mapping

def deprecate(name: str, alternative: Callable[..., Any], version: str, alt_name: Union[str, None] = ..., klass: Union[type[Warning], None] = ..., stacklevel: int = ..., msg: Union[str, None] = ...) -> Callable[[F], F]: ...
def deprecate_kwarg(old_arg_name: str, new_arg_name: Union[str, None], mapping: Union[Mapping[Any, Any], Callable[[Any], Any], None] = ..., stacklevel: int = ...) -> Callable[[F], F]: ...
def future_version_msg(version: Union[str, None]) -> str: ...
def deprecate_nonkeyword_arguments(version: Union[str, None], allowed_args: Union[list[str], None] = ..., name: Union[str, None] = ...) -> Callable[[F], F]: ...
def rewrite_axis_style_signature(name: str, extra_params: list[tuple[str, Any]]) -> Callable[[F], F]: ...
def doc(*docstrings: Union[str, Callable], **params) -> Callable[[F], F]: ...

class Substitution:
    params: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, func: F) -> F: ...
    def update(self, *args, **kwargs) -> None: ...

class Appender:
    addendum: Union[str, None]
    join: Incomplete
    def __init__(self, addendum: Union[str, None], join: str = ..., indents: int = ...) -> None: ...
    def __call__(self, func: T) -> T: ...
