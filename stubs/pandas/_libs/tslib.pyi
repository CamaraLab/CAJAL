from typing import Any, ClassVar

from typing import overload
import enum
import pandas._libs.tslibs.dtypes
import pandas._libs.tslibs.timestamps
find_stack_level: function

class OutOfBoundsDatetime(ValueError): ...

class Resolution(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    RESO_DAY: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_HR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MIN: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MS: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MTH: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_NS: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_QTR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_SEC: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_US: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_YR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    @classmethod
    def from_attrname(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def get_reso_from_freqstr(cls, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    @property
    def attr_abbrev(self) -> Any: ...
    @property
    def attrname(self) -> Any: ...

class Timestamp(pandas._libs.tslibs.timestamps._Timestamp):
    daysinmonth: Any
    tz: Any
    weekofyear: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def astimezone(self, tz = ...) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    @classmethod
    def combine(cls, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromordinal(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(cls, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(cls, *args, **kwargs) -> Any: ...
    @overload
    def replace(self, year = ..., hour = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    @classmethod
    def strptime(cls, *args, **kwargs) -> Any: ...
    def to_julian_date(self) -> Any: ...
    @classmethod
    def today(cls, *args, **kwargs) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self) -> Any: ...
    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def utcnow(cls, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    @property
    def _freqstr(self) -> Any: ...
    @property
    def freqstr(self) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def _test_parse_iso8601(*args, **kwargs) -> Any: ...
def array_to_datetime(*args, **kwargs) -> Any: ...
def array_with_unit_to_datetime(*args, **kwargs) -> Any: ...
def format_array_from_datetime(*args, **kwargs) -> Any: ...
def get_resolution(*args, **kwargs) -> Any: ...
def parse_datetime_string(*args, **kwargs) -> Any: ...
