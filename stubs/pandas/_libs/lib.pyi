from typing import Any, ClassVar

import enum
import pandas._libs.tslibs.period
import typing
Literal: typing._LiteralSpecialForm
NoDefault: typing._LiteralGenericAlias
_TYPE_MAP: dict
convert_nans_to_NA: fused_cython_function
find_stack_level: function
has_infs: fused_cython_function
i8max: int
no_default: _NoDefault
u8max: int

class Decimal:
    imag: Any
    real: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def adjusted(self, *args, **kwargs) -> Any: ...
    def as_integer_ratio(self, *args, **kwargs) -> Any: ...
    def as_tuple(self, *args, **kwargs) -> Any: ...
    def canonical(self, *args, **kwargs) -> Any: ...
    def compare(self, *args, **kwargs) -> Any: ...
    def compare_signal(self, *args, **kwargs) -> Any: ...
    def compare_total(self, *args, **kwargs) -> Any: ...
    def compare_total_mag(self, y) -> Any: ...
    def conjugate(self, *args, **kwargs) -> Any: ...
    def copy_abs(self, *args, **kwargs) -> Any: ...
    def copy_negate(self, *args, **kwargs) -> Any: ...
    def copy_sign(self, *args, **kwargs) -> Any: ...
    def exp(self, *args, **kwargs) -> Any: ...
    def fma(self, *args, **kwargs) -> Any: ...
    @classmethod
    def from_float(cls, *args, **kwargs) -> Any: ...
    def is_canonical(self, *args, **kwargs) -> Any: ...
    def is_finite(self, *args, **kwargs) -> Any: ...
    def is_infinite(self, *args, **kwargs) -> Any: ...
    def is_nan(self, *args, **kwargs) -> Any: ...
    def is_normal(self, *args, **kwargs) -> Any: ...
    def is_qnan(self, *args, **kwargs) -> Any: ...
    def is_signed(self, *args, **kwargs) -> Any: ...
    def is_snan(self, *args, **kwargs) -> Any: ...
    def is_subnormal(self, *args, **kwargs) -> Any: ...
    def is_zero(self, *args, **kwargs) -> Any: ...
    def ln(self, *args, **kwargs) -> Any: ...
    def log10(self, *args, **kwargs) -> Any: ...
    def logb(self, *args, **kwargs) -> Any: ...
    def logical_and(self, *args, **kwargs) -> Any: ...
    def logical_invert(self, *args, **kwargs) -> Any: ...
    def logical_or(self, *args, **kwargs) -> Any: ...
    def logical_xor(self, *args, **kwargs) -> Any: ...
    def max(self, *args, **kwargs) -> Any: ...
    def max_mag(self, *args, **kwargs) -> Any: ...
    def min(self, *args, **kwargs) -> Any: ...
    def min_mag(self, *args, **kwargs) -> Any: ...
    def next_minus(self, *args, **kwargs) -> Any: ...
    def next_plus(self, *args, **kwargs) -> Any: ...
    def next_toward(self, *args, **kwargs) -> Any: ...
    def normalize(self, *args, **kwargs) -> Any: ...
    def number_class(self, *args, **kwargs) -> Any: ...
    def quantize(self, *args, **kwargs) -> Any: ...
    def radix(self, base) -> Any: ...
    def remainder_near(self, *args, **kwargs) -> Any: ...
    def rotate(self, *args, **kwargs) -> Any: ...
    def same_quantum(self, *args, **kwargs) -> Any: ...
    def scaleb(self, *args, **kwargs) -> Any: ...
    def shift(self, *args, **kwargs) -> Any: ...
    def sqrt(self, *args, **kwargs) -> Any: ...
    def to_eng_string(self, *args, **kwargs) -> Any: ...
    def to_integral(self) -> Any: ...
    def to_integral_exact(self, *args, **kwargs) -> Any: ...
    def to_integral_value(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __bool__(self) -> Any: ...
    def __ceil__(self, *args, **kwargs) -> Any: ...
    def __complex__(self) -> Any: ...
    def __copy__(self) -> Any: ...
    def __deepcopy__(self) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __float__(self) -> Any: ...
    def __floor__(self, *args, **kwargs) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __format__(self, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __int__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __pow__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __round__(self) -> Any: ...
    def __rpow__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sizeof__(self) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...
    def __trunc__(self) -> Any: ...

class Enum:
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    __dir__: ClassVar[function] = ...
    __format__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __reduce_ex__: ClassVar[function] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _missing_(cls, *args, **kwargs) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def value(self) -> Any: ...

class OutOfBoundsDatetime(ValueError): ...

class OutOfBoundsTimedelta(ValueError): ...

class Period(pandas._libs.tslibs.period._Period):
    def __init__(self, *args, **kwargs) -> None: ...

class _NoDefault(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    no_default: ClassVar[_NoDefault] = ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def array_equivalent_object(*args, **kwargs) -> Any: ...
def array_to_datetime(*args, **kwargs) -> Any: ...
def count_level_2d(*args, **kwargs) -> Any: ...
def dicts_to_array(*args, **kwargs) -> Any: ...
def dtypes_all_equal(*args, **kwargs) -> Any: ...
def ensure_string_array(*args, **kwargs) -> Any: ...
def eq_NA_compat(*args, **kwargs) -> Any: ...
def fast_multiget(*args, **kwargs) -> Any: ...
def fast_unique_multiple(*args, **kwargs) -> Any: ...
def fast_unique_multiple_list(*args, **kwargs) -> Any: ...
def fast_unique_multiple_list_gen(*args, **kwargs) -> Any: ...
def fast_zip(*args, **kwargs) -> Any: ...
def generate_bins_dt64(*args, **kwargs) -> Any: ...
def generate_slices(*args, **kwargs) -> Any: ...
def get_level_sorter(*args, **kwargs) -> Any: ...
def get_reverse_indexer(*args, **kwargs) -> Any: ...
def indices_fast(*args, **kwargs) -> Any: ...
def infer_datetimelike_array(*args, **kwargs) -> Any: ...
def infer_dtype(*args, **kwargs) -> Any: ...
def is_all_arraylike(*args, **kwargs) -> Any: ...
def is_bool(*args, **kwargs) -> Any: ...
def is_bool_array(*args, **kwargs) -> Any: ...
def is_bool_list(obj) -> Any: ...
def is_complex(*args, **kwargs) -> Any: ...
def is_date_array(*args, **kwargs) -> Any: ...
def is_datetime64_array(*args, **kwargs) -> Any: ...
def is_datetime_array(*args, **kwargs) -> Any: ...
def is_datetime_with_singletz_array(*args, **kwargs) -> Any: ...
def is_decimal(*args, **kwargs) -> Any: ...
def is_float(*args, **kwargs) -> Any: ...
def is_float_array(*args, **kwargs) -> Any: ...
def is_integer(*args, **kwargs) -> Any: ...
def is_integer_array(*args, **kwargs) -> Any: ...
def is_interval(*args, **kwargs) -> Any: ...
def is_interval_array(*args, **kwargs) -> Any: ...
def is_iterator(*args, **kwargs) -> Any: ...
def is_list_like(*args, **kwargs) -> Any: ...
def is_period(*args, **kwargs) -> Any: ...
def is_scalar(dt) -> Any: ...
def is_string_array(*args, **kwargs) -> Any: ...
def is_time_array(*args, **kwargs) -> Any: ...
def is_timedelta_or_timedelta64_array(*args, **kwargs) -> Any: ...
def item_from_zerodim(*args, **kwargs) -> Any: ...
def map_infer(*args, **kwargs) -> Any: ...
def map_infer_mask(*args, **kwargs) -> Any: ...
def maybe_booleans_to_slice(*args, **kwargs) -> Any: ...
def maybe_convert_numeric(*args, **kwargs) -> Any: ...
def maybe_convert_objects(*args, **kwargs) -> Any: ...
def maybe_indices_to_slice(*args, **kwargs) -> Any: ...
def memory_usage_of_objects(*args, **kwargs) -> Any: ...
def to_object_array(*args, **kwargs) -> Any: ...
def to_object_array_tuples(*args, **kwargs) -> Any: ...
def tuples_to_object_array(*args, **kwargs) -> Any: ...
