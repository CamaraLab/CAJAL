from typing import Any, ClassVar

class BlockIndex(SparseIndex):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    blengths: Any
    blocs: Any
    indices: Any
    length: Any
    nblocks: Any
    nbytes: Any
    ngaps: Any
    npoints: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, *args, **kwargs) -> Any: ...
    def intersect(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def lookup_array(self, *args, **kwargs) -> Any: ...
    def make_union(self, *args, **kwargs) -> Any: ...
    def to_block_index(self, *args, **kwargs) -> Any: ...
    def to_int_index(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...

class IntIndex(SparseIndex):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    indices: Any
    length: Any
    nbytes: Any
    ngaps: Any
    npoints: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def equals(self, *args, **kwargs) -> Any: ...
    def intersect(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def lookup_array(self, *args, **kwargs) -> Any: ...
    def make_union(self, *args, **kwargs) -> Any: ...
    def to_block_index(self, *args, **kwargs) -> Any: ...
    def to_int_index(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...

class SparseIndex:
    def __init__(self, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def __pyx_unpickle_BlockMerge(*args, **kwargs) -> Any: ...
def __pyx_unpickle_BlockUnion(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_SparseIndex(*args, **kwargs) -> Any: ...
def get_blocks(*args, **kwargs) -> Any: ...
def make_mask_object_ndarray(*args, **kwargs) -> Any: ...
def sparse_add_float64(*args, **kwargs) -> Any: ...
def sparse_add_int64(*args, **kwargs) -> Any: ...
def sparse_and_int64(*args, **kwargs) -> Any: ...
def sparse_and_uint8(*args, **kwargs) -> Any: ...
def sparse_div_float64(*args, **kwargs) -> Any: ...
def sparse_div_int64(*args, **kwargs) -> Any: ...
def sparse_eq_float64(*args, **kwargs) -> Any: ...
def sparse_eq_int64(*args, **kwargs) -> Any: ...
def sparse_floordiv_float64(*args, **kwargs) -> Any: ...
def sparse_floordiv_int64(*args, **kwargs) -> Any: ...
def sparse_ge_float64(*args, **kwargs) -> Any: ...
def sparse_ge_int64(*args, **kwargs) -> Any: ...
def sparse_gt_float64(*args, **kwargs) -> Any: ...
def sparse_gt_int64(*args, **kwargs) -> Any: ...
def sparse_le_float64(*args, **kwargs) -> Any: ...
def sparse_le_int64(*args, **kwargs) -> Any: ...
def sparse_lt_float64(*args, **kwargs) -> Any: ...
def sparse_lt_int64(*args, **kwargs) -> Any: ...
def sparse_mod_float64(*args, **kwargs) -> Any: ...
def sparse_mod_int64(*args, **kwargs) -> Any: ...
def sparse_mul_float64(*args, **kwargs) -> Any: ...
def sparse_mul_int64(*args, **kwargs) -> Any: ...
def sparse_ne_float64(*args, **kwargs) -> Any: ...
def sparse_ne_int64(*args, **kwargs) -> Any: ...
def sparse_or_int64(*args, **kwargs) -> Any: ...
def sparse_or_uint8(*args, **kwargs) -> Any: ...
def sparse_pow_float64(*args, **kwargs) -> Any: ...
def sparse_pow_int64(*args, **kwargs) -> Any: ...
def sparse_sub_float64(*args, **kwargs) -> Any: ...
def sparse_sub_int64(*args, **kwargs) -> Any: ...
def sparse_truediv_float64(*args, **kwargs) -> Any: ...
def sparse_truediv_int64(*args, **kwargs) -> Any: ...
def sparse_xor_int64(*args, **kwargs) -> Any: ...
def sparse_xor_uint8(*args, **kwargs) -> Any: ...
