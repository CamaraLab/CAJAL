from typing import Any, ClassVar

from typing import overload
NODE_CLASSES: dict
VALID_CLOSED: frozenset
is_monotonic: fused_cython_function

class Interval(IntervalMixin):
    _typ: ClassVar[str] = ...
    __array_priority__: ClassVar[int] = ...
    closed: Any
    left: Any
    right: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _repr_base(self, *args, **kwargs) -> Any: ...
    def _validate_endpoint(self, *args, **kwargs) -> Any: ...
    @overload
    def overlaps(self, i2) -> Any: ...
    @overload
    def overlaps(self, i3) -> Any: ...
    @overload
    def overlaps(self, i5) -> Any: ...
    @overload
    def overlaps(self, i6) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class IntervalMixin:
    closed_left: Any
    closed_right: Any
    is_empty: Any
    length: Any
    mid: Any
    open_left: Any
    open_right: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _check_closed_matches(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IntervalTree(IntervalMixin):
    _is_overlapping: Any
    _left_sorter: Any
    _na_count: Any
    _right_sorter: Any
    closed: Any
    dtype: Any
    is_monotonic_increasing: Any
    is_overlapping: Any
    left: Any
    left_sorter: Any
    right: Any
    right_sorter: Any
    root: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __pyx_fuse_0get_indexer(self, *args, **kwargs) -> Any: ...
    def __pyx_fuse_0get_indexer_non_unique(self, *args, **kwargs) -> Any: ...
    def __pyx_fuse_1get_indexer(self, *args, **kwargs) -> Any: ...
    def __pyx_fuse_1get_indexer_non_unique(self, *args, **kwargs) -> Any: ...
    def __pyx_fuse_2get_indexer(self, *args, **kwargs) -> Any: ...
    def __pyx_fuse_2get_indexer_non_unique(self, *args, **kwargs) -> Any: ...
    def clear_mapping(self, *args, **kwargs) -> Any: ...
    def get_indexer(self, *args, **kwargs) -> Any: ...
    def get_indexer_non_unique(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Float64ClosedBothIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Float64ClosedLeftIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Float64ClosedNeitherIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Float64ClosedRightIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Int64ClosedBothIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Int64ClosedLeftIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Int64ClosedNeitherIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Int64ClosedRightIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_IntervalMixin(*args, **kwargs) -> Any: ...
def __pyx_unpickle_IntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_IntervalTree(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Uint64ClosedBothIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Uint64ClosedLeftIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Uint64ClosedNeitherIntervalNode(*args, **kwargs) -> Any: ...
def __pyx_unpickle_Uint64ClosedRightIntervalNode(*args, **kwargs) -> Any: ...
def intervals_to_interval_bounds(*args, **kwargs) -> Any: ...
def le(*args, **kwargs) -> Any: ...
def lt(*args, **kwargs) -> Any: ...
