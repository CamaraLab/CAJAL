from typing import Any, ClassVar

from typing import overload
import numpy
import pandas.core.dtypes.dtypes
ENOENT: int
QUOTE_MINIMAL: int
QUOTE_NONE: int
QUOTE_NONNUMERIC: int
STR_NA_VALUES: set
_NA_VALUES: list
decode: function
find_stack_level: function
is_bool_dtype: function
is_datetime64_dtype: function
is_dict_like: function
is_extension_array_dtype: function
is_float_dtype: function
is_integer_dtype: function
is_object_dtype: function
na_values: dict

class CategoricalDtype(pandas.core.dtypes.dtypes.PandasExtensionDtype):
    class type(type): ...
    __init__: ClassVar[function] = ...
    _cache_dtypes: ClassVar[dict] = ...
    _finalize: ClassVar[function] = ...
    _get_common_dtype: ClassVar[function] = ...
    _metadata: ClassVar[tuple] = ...
    base: ClassVar[numpy.dtype[object_]] = ...
    kind: ClassVar[str] = ...
    name: ClassVar[str] = ...
    str: ClassVar[str] = ...
    update_dtype: ClassVar[function] = ...
    __annotations__: ClassVar[dict] = ...
    __eq__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __setstate__: ClassVar[function] = ...
    _hash_categories: Any
    @classmethod
    def _from_categorical_dtype(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_fastpath(cls, *args, **kwargs) -> Any: ...
    @overload
    @classmethod
    def _from_values_or_dtype(cls) -> Any: ...
    @overload
    @classmethod
    def _from_values_or_dtype(cls, 
...categories = ..., ordered = ...) -> Any: ...
    @overload
    @classmethod
    def _from_values_or_dtype(cls, c, dtype = ...) -> Any: ...
    @classmethod
    def construct_array_type(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def construct_from_string(cls, *args, **kwargs) -> Any: ...
    def validate_categories(self, *args, **kwargs) -> Any: ...
    def validate_ordered(self, *args, **kwargs) -> Any: ...
    @property
    def _is_boolean(self) -> Any: ...
    @property
    def categories(self) -> Any: ...
    @property
    def ordered(self) -> Any: ...

class EmptyDataError(ValueError): ...

class ParserError(ValueError): ...

class ParserWarning(Warning): ...

class TextReader:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    converters: Any
    delimiter: Any
    dtype: Any
    header: Any
    index_col: Any
    leading_cols: Any
    na_values: Any
    skiprows: Any
    table_width: Any
    unnamed_cols: Any
    usecols: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _convert_column_data(self, *args, **kwargs) -> Any: ...
    def _get_converter(self, *args, **kwargs) -> Any: ...
    def _set_quoting(self, *args, **kwargs) -> Any: ...
    def close(self, *args, **kwargs) -> Any: ...
    def read(self, *args, **kwargs) -> Any: ...
    def read_low_memory(self, *args, **kwargs) -> Any: ...
    def remove_noconvert(self, *args, **kwargs) -> Any: ...
    def set_noconvert(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class defaultdict(dict):
    default_factory: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def copy(self, *args, **kwargs) -> Any: ...
    @classmethod
    def __class_getitem__(cls, *args, **kwargs) -> Any: ...
    def __copy__(self) -> Any: ...
    def __missing__(self, key) -> Any: ...
    def __or__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __ror__(self, other) -> Any: ...

class k(numpy.generic):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __add__(self, other) -> Any: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __delattr__(self, name) -> Any: ...
    def __delitem__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getitem__(self, index) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __iadd__(self, other) -> Any: ...
    def __imul__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __setattr__(self, name, value) -> Any: ...
    def __setitem__(self, index, object) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def _compute_na_values(*args, **kwargs) -> Any: ...
def _ensure_encoded(*args, **kwargs) -> Any: ...
def _maybe_upcast(*args, **kwargs) -> Any: ...
def sanitize_objects(*args, **kwargs) -> Any: ...
