from typing import Any, ClassVar

backfill: fused_cython_function
backfill_2d_inplace: fused_cython_function
backfill_inplace: fused_cython_function
diff_2d: fused_cython_function
is_monotonic: fused_cython_function
kth_smallest: fused_cython_function
pad: fused_cython_function
pad_2d_inplace: fused_cython_function
pad_inplace: fused_cython_function
rank_1d: fused_cython_function
rank_2d: fused_cython_function
tiebreakers: dict

class Infinity:
    __hash__: ClassVar[None] = ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

class NegInfinity:
    __hash__: ClassVar[None] = ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def ensure_float64(*args, **kwargs) -> Any: ...
def ensure_int16(*args, **kwargs) -> Any: ...
def ensure_int32(*args, **kwargs) -> Any: ...
def ensure_int64(*args, **kwargs) -> Any: ...
def ensure_int8(*args, **kwargs) -> Any: ...
def ensure_object(*args, **kwargs) -> Any: ...
def ensure_platform_int(*args, **kwargs) -> Any: ...
def ensure_uint64(*args, **kwargs) -> Any: ...
def groupsort_indexer(*args, **kwargs) -> Any: ...
def is_lexsorted(*args, **kwargs) -> Any: ...
def nancorr(*args, **kwargs) -> Any: ...
def nancorr_spearman(*args, **kwargs) -> Any: ...
def take_1d_bool_bool(*args, **kwargs) -> Any: ...
def take_1d_bool_object(*args, **kwargs) -> Any: ...
def take_1d_float32_float32(*args, **kwargs) -> Any: ...
def take_1d_float32_float64(*args, **kwargs) -> Any: ...
def take_1d_float64_float64(*args, **kwargs) -> Any: ...
def take_1d_int16_float64(*args, **kwargs) -> Any: ...
def take_1d_int16_int16(*args, **kwargs) -> Any: ...
def take_1d_int16_int32(*args, **kwargs) -> Any: ...
def take_1d_int16_int64(*args, **kwargs) -> Any: ...
def take_1d_int32_float64(*args, **kwargs) -> Any: ...
def take_1d_int32_int32(*args, **kwargs) -> Any: ...
def take_1d_int32_int64(*args, **kwargs) -> Any: ...
def take_1d_int64_float64(*args, **kwargs) -> Any: ...
def take_1d_int64_int64(*args, **kwargs) -> Any: ...
def take_1d_int8_float64(*args, **kwargs) -> Any: ...
def take_1d_int8_int32(*args, **kwargs) -> Any: ...
def take_1d_int8_int64(*args, **kwargs) -> Any: ...
def take_1d_int8_int8(*args, **kwargs) -> Any: ...
def take_1d_object_object(*args, **kwargs) -> Any: ...
def take_2d_axis0_bool_bool(*args, **kwargs) -> Any: ...
def take_2d_axis0_bool_object(*args, **kwargs) -> Any: ...
def take_2d_axis0_float32_float32(*args, **kwargs) -> Any: ...
def take_2d_axis0_float32_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_float64_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int16_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int16_int16(*args, **kwargs) -> Any: ...
def take_2d_axis0_int16_int32(*args, **kwargs) -> Any: ...
def take_2d_axis0_int16_int64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int32_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int32_int32(*args, **kwargs) -> Any: ...
def take_2d_axis0_int32_int64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int64_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int64_int64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int8_float64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int8_int32(*args, **kwargs) -> Any: ...
def take_2d_axis0_int8_int64(*args, **kwargs) -> Any: ...
def take_2d_axis0_int8_int8(*args, **kwargs) -> Any: ...
def take_2d_axis0_object_object(*args, **kwargs) -> Any: ...
def take_2d_axis1_bool_bool(*args, **kwargs) -> Any: ...
def take_2d_axis1_bool_object(*args, **kwargs) -> Any: ...
def take_2d_axis1_float32_float32(*args, **kwargs) -> Any: ...
def take_2d_axis1_float32_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_float64_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int16_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int16_int16(*args, **kwargs) -> Any: ...
def take_2d_axis1_int16_int32(*args, **kwargs) -> Any: ...
def take_2d_axis1_int16_int64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int32_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int32_int32(*args, **kwargs) -> Any: ...
def take_2d_axis1_int32_int64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int64_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int64_int64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int8_float64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int8_int32(*args, **kwargs) -> Any: ...
def take_2d_axis1_int8_int64(*args, **kwargs) -> Any: ...
def take_2d_axis1_int8_int8(*args, **kwargs) -> Any: ...
def take_2d_axis1_object_object(*args, **kwargs) -> Any: ...
def take_2d_multi_bool_bool(*args, **kwargs) -> Any: ...
def take_2d_multi_bool_object(*args, **kwargs) -> Any: ...
def take_2d_multi_float32_float32(*args, **kwargs) -> Any: ...
def take_2d_multi_float32_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_float64_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_int16_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_int16_int16(*args, **kwargs) -> Any: ...
def take_2d_multi_int16_int32(*args, **kwargs) -> Any: ...
def take_2d_multi_int16_int64(*args, **kwargs) -> Any: ...
def take_2d_multi_int32_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_int32_int32(*args, **kwargs) -> Any: ...
def take_2d_multi_int32_int64(*args, **kwargs) -> Any: ...
def take_2d_multi_int64_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_int64_int64(*args, **kwargs) -> Any: ...
def take_2d_multi_int8_float64(*args, **kwargs) -> Any: ...
def take_2d_multi_int8_int32(*args, **kwargs) -> Any: ...
def take_2d_multi_int8_int64(*args, **kwargs) -> Any: ...
def take_2d_multi_int8_int8(*args, **kwargs) -> Any: ...
def take_2d_multi_object_object(*args, **kwargs) -> Any: ...
def unique_deltas(*args, **kwargs) -> Any: ...
def validate_limit(*args, **kwargs) -> Any: ...
