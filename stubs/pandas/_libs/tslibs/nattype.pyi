from typing import Any, ClassVar

from typing import overload
import datetime
NaT: NaTType
find_stack_level: function
iNaT: int
nat_strings: set

class NaTType(_NaT):
    def __init__(self, *args, **kwargs) -> None: ...
    def astimezone(self, tz = ...) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    def combine(self, date, time) -> Any: ...
    def ctime(self) -> Any: ...
    def date(self, *args, **kwargs) -> Any: ...
    @overload
    def day_name(self) -> Any: ...
    @overload
    def day_name(self) -> Any: ...
    def dst(self) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    def fromisocalendar(self, *args, **kwargs) -> Any: ...
    def fromordinal(self, *args, **kwargs) -> Any: ...
    def fromtimestamp(self, ts) -> Any: ...
    def isocalendar(self, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    @overload
    def month_name(self) -> Any: ...
    @overload
    def month_name(self) -> Any: ...
    @overload
    def now(self) -> Any: ...
    @overload
    def now(self) -> Any: ...
    @overload
    def replace(self, year = ..., hour = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    def strptime(self, string, format) -> Any: ...
    def time(self, *args, **kwargs) -> Any: ...
    def timestamp(self) -> Any: ...
    def timetuple(self, *args, **kwargs) -> Any: ...
    def timetz(self, *args, **kwargs) -> Any: ...
    @overload
    def to_pydatetime(self) -> Any: ...
    @overload
    def to_pydatetime(self) -> Any: ...
    @overload
    def today(self) -> Any: ...
    @overload
    def today(self) -> Any: ...
    @overload
    def today(self) -> Any: ...
    def toordinal(self, *args, **kwargs) -> Any: ...
    def total_seconds(self, *args, **kwargs) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self) -> Any: ...
    def tzname(self) -> Any: ...
    def utcfromtimestamp(self, ts) -> Any: ...
    @overload
    def utcnow(self) -> Any: ...
    @overload
    def utcnow(self) -> Any: ...
    def utcoffset(self) -> Any: ...
    def utctimetuple(self, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    @property
    def day(self) -> Any: ...
    @property
    def day_of_week(self) -> Any: ...
    @property
    def day_of_year(self) -> Any: ...
    @property
    def dayofweek(self) -> Any: ...
    @property
    def dayofyear(self) -> Any: ...
    @property
    def days(self) -> Any: ...
    @property
    def days_in_month(self) -> Any: ...
    @property
    def daysinmonth(self) -> Any: ...
    @property
    def freq(self) -> Any: ...
    @property
    def hour(self) -> Any: ...
    @property
    def microsecond(self) -> Any: ...
    @property
    def microseconds(self) -> Any: ...
    @property
    def millisecond(self) -> Any: ...
    @property
    def minute(self) -> Any: ...
    @property
    def month(self) -> Any: ...
    @property
    def nanosecond(self) -> Any: ...
    @property
    def nanoseconds(self) -> Any: ...
    @property
    def quarter(self) -> Any: ...
    @property
    def qyear(self) -> Any: ...
    @property
    def second(self) -> Any: ...
    @property
    def seconds(self) -> Any: ...
    @property
    def tz(self) -> Any: ...
    @property
    def tzinfo(self) -> Any: ...
    @property
    def week(self) -> Any: ...
    @property
    def weekofyear(self) -> Any: ...
    @property
    def year(self) -> Any: ...

class _NaT(datetime.datetime):
    __array_priority__: ClassVar[int] = ...
    asm8: Any
    is_leap_year: Any
    is_month_end: Any
    is_month_start: Any
    is_quarter_end: Any
    is_quarter_start: Any
    is_year_end: Any
    is_year_start: Any
    value: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def isoformat(self, *args, **kwargs) -> Any: ...
    def to_datetime64(self, *args, **kwargs) -> Any: ...
    @overload
    def to_numpy(self) -> Any: ...
    @overload
    def to_numpy(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce_cython__(self, *args, **kwargs) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setstate_cython__(self, *args, **kwargs) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

def __nat_unpickle(*args, **kwargs) -> Any: ...
def __pyx_unpickle__NaT(*args, **kwargs) -> Any: ...
def _make_error_func(*args, **kwargs) -> Any: ...
def _make_nan_func(*args, **kwargs) -> Any: ...
def _make_nat_func(*args, **kwargs) -> Any: ...
