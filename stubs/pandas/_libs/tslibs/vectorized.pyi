from typing import Any, ClassVar

import enum
import pandas._libs.tslibs.dtypes

class Resolution(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    RESO_DAY: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_HR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MIN: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MS: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_MTH: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_NS: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_QTR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_SEC: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_US: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    RESO_YR: ClassVar[pandas._libs.tslibs.dtypes.Resolution] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    @classmethod
    def from_attrname(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def get_reso_from_freqstr(cls, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    @property
    def attr_abbrev(self) -> Any: ...
    @property
    def attrname(self) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def dt64arr_to_periodarr(*args, **kwargs) -> Any: ...
def get_resolution(*args, **kwargs) -> Any: ...
def ints_to_pydatetime(*args, **kwargs) -> Any: ...
def is_date_array_normalized(*args, **kwargs) -> Any: ...
def normalize_i8_timestamps(*args, **kwargs) -> Any: ...
def tz_convert_from_utc(*args, **kwargs) -> Any: ...
