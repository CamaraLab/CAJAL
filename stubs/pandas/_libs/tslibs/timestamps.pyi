from typing import Any, ClassVar

from typing import overload
import datetime
import pandas._libs.tslibs.base
import pandas._libs.tslibs.timedeltas
_no_input: object
_zero_time: datetime.time
find_stack_level: function

class MinMaxReso:
    def __init__(self, *args, **kwargs) -> None: ...
    def __get__(self, instance, owner) -> Any: ...
    def __set__(self, instance, value) -> Any: ...

class OutOfBoundsDatetime(ValueError): ...

class OutOfBoundsTimedelta(ValueError): ...

class RoundTo:
    @property
    def MINUS_INFTY(self) -> Any: ...
    @property
    def NEAREST_HALF_EVEN(self) -> Any: ...
    @property
    def NEAREST_HALF_MINUS_INFTY(self) -> Any: ...
    @property
    def NEAREST_HALF_PLUS_INFTY(self) -> Any: ...
    @property
    def PLUS_INFTY(self) -> Any: ...

class Timedelta(pandas._libs.tslibs.timedeltas._Timedelta):
    _req_any_kwargs_new: ClassVar[set] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class Timestamp(_Timestamp):
    daysinmonth: Any
    tz: Any
    weekofyear: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def astimezone(self, tz = ...) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    @classmethod
    def combine(cls, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromordinal(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(cls, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(cls, *args, **kwargs) -> Any: ...
    @overload
    def replace(self, year = ..., hour = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    @classmethod
    def strptime(cls, *args, **kwargs) -> Any: ...
    def to_julian_date(self) -> Any: ...
    @classmethod
    def today(cls, *args, **kwargs) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self) -> Any: ...
    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def utcnow(cls, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    @property
    def _freqstr(self) -> Any: ...
    @property
    def freqstr(self) -> Any: ...

class _Timestamp(pandas._libs.tslibs.base.ABCTimestamp):
    __array_priority__: ClassVar[int] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _date_repr: Any
    _freq: Any
    _repr_base: Any
    _reso: Any
    _short_repr: Any
    _time_repr: Any
    asm8: Any
    day_of_week: Any
    day_of_year: Any
    dayofweek: Any
    dayofyear: Any
    days_in_month: Any
    freq: Any
    is_leap_year: Any
    is_month_end: Any
    is_month_start: Any
    is_quarter_end: Any
    is_quarter_start: Any
    is_year_end: Any
    is_year_start: Any
    max: Any
    min: Any
    nanosecond: Any
    quarter: Any
    resolution: Any
    value: Any
    week: Any
    year: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _as_unit(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_dt64(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_value_and_reso(cls, *args, **kwargs) -> Any: ...
    def _set_freq(self, *args, **kwargs) -> Any: ...
    @overload
    def day_name(self) -> Any: ...
    @overload
    def day_name(self) -> Any: ...
    @overload
    def isoformat(self) -> Any: ...
    @overload
    def isoformat(self, timespec = ...) -> Any: ...
    @overload
    def month_name(self) -> Any: ...
    @overload
    def month_name(self) -> Any: ...
    def normalize(self) -> Any: ...
    def timestamp(self) -> Any: ...
    def to_datetime64(self, *args, **kwargs) -> Any: ...
    @overload
    def to_numpy(self) -> Any: ...
    @overload
    def to_numpy(self) -> Any: ...
    @overload
    def to_period(self, freq = ...) -> Any: ...
    @overload
    def to_period(self, freq = ...) -> Any: ...
    @overload
    def to_period(self, freq = ...) -> Any: ...
    @overload
    def to_period(self, freq = ...) -> Any: ...
    @overload
    def to_pydatetime(self) -> Any: ...
    @overload
    def to_pydatetime(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __reduce_ex__(self, protocol) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __sub__(self, other) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def _unpickle_timestamp(*args, **kwargs) -> Any: ...
def get_date_name_field(*args, **kwargs) -> Any: ...
def get_start_end_field(*args, **kwargs) -> Any: ...
def integer_op_not_supported(*args, **kwargs) -> Any: ...
def round_nsint64(*args, **kwargs) -> Any: ...
