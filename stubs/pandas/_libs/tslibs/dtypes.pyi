from typing import Any, ClassVar

import enum
_attrname_to_abbrevs: dict
_period_code_map: dict
_reverse_period_code_map: dict

class Enum:
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    __dir__: ClassVar[function] = ...
    __format__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __reduce_ex__: ClassVar[function] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _missing_(cls, *args, **kwargs) -> Any: ...
    @property
    def name(self) -> Any: ...
    @property
    def value(self) -> Any: ...

class FreqGroup(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    FR_ANN: ClassVar[FreqGroup] = ...
    FR_BUS: ClassVar[FreqGroup] = ...
    FR_DAY: ClassVar[FreqGroup] = ...
    FR_HR: ClassVar[FreqGroup] = ...
    FR_MIN: ClassVar[FreqGroup] = ...
    FR_MS: ClassVar[FreqGroup] = ...
    FR_MTH: ClassVar[FreqGroup] = ...
    FR_NS: ClassVar[FreqGroup] = ...
    FR_QTR: ClassVar[FreqGroup] = ...
    FR_SEC: ClassVar[FreqGroup] = ...
    FR_UND: ClassVar[FreqGroup] = ...
    FR_US: ClassVar[FreqGroup] = ...
    FR_WK: ClassVar[FreqGroup] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    def from_period_dtype_code(self, *args, **kwargs) -> Any: ...

class NpyDatetimeUnit(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    NPY_FR_D: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_GENERIC: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_M: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_W: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_Y: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_as: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_fs: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_h: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_m: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ms: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ns: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ps: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_s: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_us: ClassVar[NpyDatetimeUnit] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...

class PeriodDtypeBase:
    __hash__: ClassVar[None] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _dtype_code: Any
    _freq_group_code: Any
    _freqstr: Any
    _resolution_obj: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _get_to_timestamp_base(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Resolution(enum.Enum):
    class _member_type_:
        __class__: Any
        def __init__(self, *args, **kwargs) -> None: ...
        def __delattr__(self, name) -> Any: ...
        def __dir__(self) -> Any: ...
        def __eq__(self, other) -> Any: ...
        def __format__(self, *args, **kwargs) -> Any: ...
        def __ge__(self, other) -> Any: ...
        def __gt__(self, other) -> Any: ...
        def __hash__(self) -> Any: ...
        @classmethod
        def __init_subclass__(cls, *args, **kwargs) -> Any: ...
        def __le__(self, other) -> Any: ...
        def __lt__(self, other) -> Any: ...
        def __ne__(self, other) -> Any: ...
        def __reduce__(self) -> Any: ...
        def __reduce_ex__(self, protocol) -> Any: ...
        def __setattr__(self, name, value) -> Any: ...
        def __sizeof__(self) -> Any: ...
        @classmethod
        def __subclasshook__(cls, *args, **kwargs) -> Any: ...
    __new__: ClassVar[function] = ...
    RESO_DAY: ClassVar[Resolution] = ...
    RESO_HR: ClassVar[Resolution] = ...
    RESO_MIN: ClassVar[Resolution] = ...
    RESO_MS: ClassVar[Resolution] = ...
    RESO_MTH: ClassVar[Resolution] = ...
    RESO_NS: ClassVar[Resolution] = ...
    RESO_QTR: ClassVar[Resolution] = ...
    RESO_SEC: ClassVar[Resolution] = ...
    RESO_US: ClassVar[Resolution] = ...
    RESO_YR: ClassVar[Resolution] = ...
    _generate_next_value_: ClassVar[function] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _value2member_map_: ClassVar[dict] = ...
    @classmethod
    def from_attrname(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def get_reso_from_freqstr(cls, *args, **kwargs) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    @property
    def attr_abbrev(self) -> Any: ...
    @property
    def attrname(self) -> Any: ...

def is_supported_unit(*args, **kwargs) -> Any: ...
def npy_unit_to_abbrev(*args, **kwargs) -> Any: ...
def periods_per_day(*args, **kwargs) -> Any: ...
def periods_per_second(*args, **kwargs) -> Any: ...
