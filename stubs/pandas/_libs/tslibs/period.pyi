from typing import Any, ClassVar

from typing import overload
import numpy
import pandas._libs.tslibs.timestamps
DIFFERENT_FREQ: str
DT64NS_DTYPE: numpy.dtype[datetime64]
INVALID_FREQ_ERR_MSG: str
find_stack_level: function

class IncompatibleFrequency(ValueError): ...

class Period(_Period):
    def __init__(self, *args, **kwargs) -> None: ...

class PeriodMixin:
    end_time: Any
    start_time: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _require_matching_freq(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Timestamp(pandas._libs.tslibs.timestamps._Timestamp):
    daysinmonth: Any
    tz: Any
    weekofyear: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def astimezone(self, tz = ...) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    @classmethod
    def combine(cls, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromordinal(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(cls, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(cls, *args, **kwargs) -> Any: ...
    @overload
    def replace(self, year = ..., hour = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    @classmethod
    def strptime(cls, *args, **kwargs) -> Any: ...
    def to_julian_date(self) -> Any: ...
    @classmethod
    def today(cls, *args, **kwargs) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self) -> Any: ...
    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def utcnow(cls, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    @property
    def _freqstr(self) -> Any: ...
    @property
    def freqstr(self) -> Any: ...

class _Period(PeriodMixin):
    __array_priority__: ClassVar[int] = ...
    _dtype: Any
    day: Any
    day_of_week: Any
    day_of_year: Any
    dayofweek: Any
    dayofyear: Any
    days_in_month: Any
    daysinmonth: Any
    freq: Any
    freqstr: Any
    hour: Any
    is_leap_year: Any
    minute: Any
    month: Any
    ordinal: Any
    quarter: Any
    qyear: Any
    second: Any
    week: Any
    weekday: Any
    weekofyear: Any
    year: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _add_offset(self, *args, **kwargs) -> Any: ...
    def _add_timedeltalike_scalar(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_ordinal(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def _maybe_convert_freq(cls, *args, **kwargs) -> Any: ...
    def asfreq(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(cls, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    def to_timestamp(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __sub__(self, other) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_PeriodMixin(*args, **kwargs) -> Any: ...
def extract_freq(*args, **kwargs) -> Any: ...
def extract_ordinals(*args, **kwargs) -> Any: ...
def freq_to_dtype_code(*args, **kwargs) -> Any: ...
def from_ordinals(*args, **kwargs) -> Any: ...
def get_period_field_arr(*args, **kwargs) -> Any: ...
def parse_time_string(*args, **kwargs) -> Any: ...
def period_asfreq(*args, **kwargs) -> Any: ...
def period_asfreq_arr(*args, **kwargs) -> Any: ...
def period_ordinal(*args, **kwargs) -> Any: ...
def periodarr_to_dt64arr(*args, **kwargs) -> Any: ...
def validate_end_alias(*args, **kwargs) -> Any: ...
