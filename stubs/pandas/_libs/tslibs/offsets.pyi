from typing import Any, ClassVar

from typing import overload
import datetime
import pandas._libs.tslibs.timedeltas
import pandas._libs.tslibs.timestamps
import re
INVALID_FREQ_ERR_MSG: str
MONTH_ALIASES: dict
MONTH_TO_CAL_NUM: dict
_dont_uppercase: set
_lite_rule_alias: dict
_offset_map: dict
_relativedelta_kwds: set
easter: function
find_stack_level: function
int_to_weekday: dict
opattern: re.Pattern
prefix_mapping: dict
weekday_to_int: dict

class ApplyTypeError(TypeError): ...

class BDay(BusinessMixin):
    _attributes: ClassVar[tuple] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def _offset_str(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BMonthBegin(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BMonthEnd(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BQuarterBegin(QuarterOffset):
    _day_opt: ClassVar[str] = ...
    _default_starting_month: ClassVar[int] = ...
    _from_name_starting_month: ClassVar[int] = ...
    _output_name: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BQuarterEnd(QuarterOffset):
    _day_opt: ClassVar[str] = ...
    _default_starting_month: ClassVar[int] = ...
    _from_name_starting_month: ClassVar[int] = ...
    _output_name: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BYearBegin(YearOffset):
    _day_opt: ClassVar[str] = ...
    _default_month: ClassVar[int] = ...
    _outputName: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BYearEnd(YearOffset):
    _day_opt: ClassVar[str] = ...
    _default_month: ClassVar[int] = ...
    _outputName: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BaseOffset:
    _adjust_dst: ClassVar[bool] = ...
    _attributes: ClassVar[tuple] = ...
    _day_opt: ClassVar[None] = ...
    _deprecations: ClassVar[frozenset] = ...
    _use_relativedelta: ClassVar[bool] = ...
    __array_priority__: ClassVar[int] = ...
    _cache: Any
    _params: Any
    _prefix: Any
    base: Any
    freqstr: Any
    kwds: Any
    n: Any
    name: Any
    nanos: Any
    normalize: Any
    rule_code: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def _get_offset_day(self, *args, **kwargs) -> Any: ...
    def _offset_str(self, *args, **kwargs) -> Any: ...
    def _repr_attrs(self, *args, **kwargs) -> Any: ...
    def _validate_n(self, *args, **kwargs) -> Any: ...
    def apply(self, *args, **kwargs) -> Any: ...
    def apply_index(self, *args, **kwargs) -> Any: ...
    def copy(self) -> Any: ...
    def isAnchored(self, *args, **kwargs) -> Any: ...
    @overload
    def is_anchored(self) -> Any: ...
    @overload
    def is_anchored(self) -> Any: ...
    def is_month_end(self, ts) -> Any: ...
    def is_month_start(self, ts) -> Any: ...
    @overload
    def is_on_offset(self, ts) -> Any: ...
    @overload
    def is_on_offset(self, ts) -> Any: ...
    def is_quarter_end(self, ts) -> Any: ...
    def is_quarter_start(self, ts) -> Any: ...
    def is_year_end(self, ts) -> Any: ...
    def is_year_start(self, ts) -> Any: ...
    def onOffset(self, *args, **kwargs) -> Any: ...
    def rollback(self, *args, **kwargs) -> Any: ...
    def rollforward(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __call__(self, *args, **kwargs) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __reduce_cython__(self, *args, **kwargs) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __setstate_cython__(self, *args, **kwargs) -> Any: ...
    def __sub__(self, other) -> Any: ...

class BusinessDay(BusinessMixin):
    _attributes: ClassVar[tuple] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def _offset_str(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BusinessHour(BusinessMixin):
    _adjust_dst: ClassVar[bool] = ...
    _anchor: ClassVar[int] = ...
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    end: Any
    next_bday: Any
    start: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _get_business_hours_by_sec(self, *args, **kwargs) -> Any: ...
    def _get_closing_time(self, *args, **kwargs) -> Any: ...
    def _is_on_offset(self, *args, **kwargs) -> Any: ...
    def _next_opening_time(self, *args, **kwargs) -> Any: ...
    def _prev_opening_time(self, *args, **kwargs) -> Any: ...
    def _repr_attrs(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def rollback(self, *args, **kwargs) -> Any: ...
    def rollforward(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BusinessMixin(SingleConstructorOffset):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _offset: Any
    calendar: Any
    holidays: Any
    offset: Any
    weekmask: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _init_custom(self, *args, **kwargs) -> Any: ...
    def _repr_attrs(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class BusinessMonthBegin(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class BusinessMonthEnd(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class CBMonthBegin(_CustomBusinessMonth):
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class CBMonthEnd(_CustomBusinessMonth):
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class CDay(BusinessDay):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CustomBusinessDay(BusinessDay):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class CustomBusinessHour(BusinessHour):
    _anchor: ClassVar[int] = ...
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...

class CustomBusinessMonthBegin(_CustomBusinessMonth):
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class CustomBusinessMonthEnd(_CustomBusinessMonth):
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class DateOffset(RelativeDeltaOffset):
    def __setattr__(self, name, value) -> Any: ...

class Day(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class Easter(SingleConstructorOffset):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FY5253(FY5253Mixin):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def _parse_suffix(cls, *args, **kwargs) -> Any: ...
    def get_year_end(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...

class FY5253Mixin(SingleConstructorOffset):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    rule_code: Any
    startingMonth: Any
    variation: Any
    weekday: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _get_suffix_prefix(self, *args, **kwargs) -> Any: ...
    def get_rule_code_suffix(self, *args, **kwargs) -> Any: ...
    def is_anchored(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class FY5253Quarter(FY5253Mixin):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _offset: Any
    qtr_with_extra_week: Any
    rule_code: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def _rollback_to_year(self, *args, **kwargs) -> Any: ...
    def get_weeks(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def year_has_extra_week(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Hour(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class LastWeekOfMonth(WeekOfMonthMixin):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def _get_offset_day(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Micro(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class Milli(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class Minute(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class MonthBegin(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class MonthEnd(MonthOffset):
    _day_opt: ClassVar[str] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class MonthOffset(SingleConstructorOffset):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Nano(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class OffsetMeta(type):
    @classmethod
    def __instancecheck__(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def __subclasscheck__(cls, *args, **kwargs) -> Any: ...

class QuarterBegin(QuarterOffset):
    _day_opt: ClassVar[str] = ...
    _default_starting_month: ClassVar[int] = ...
    _from_name_starting_month: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class QuarterEnd(QuarterOffset):
    _day_opt: ClassVar[str] = ...
    _default_starting_month: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _period_dtype_code: Any
    def __init__(self, *args, **kwargs) -> None: ...

class QuarterOffset(SingleConstructorOffset):
    _attributes: ClassVar[tuple] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    rule_code: Any
    startingMonth: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def is_anchored(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class RelativeDeltaOffset(BaseOffset):
    _adjust_dst: ClassVar[bool] = ...
    _attributes: ClassVar[tuple] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __getstate__(self) -> Any: ...
    def __reduce_cython__(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __setstate_cython__(self, *args, **kwargs) -> Any: ...

class Second(Tick):
    _nanos_inc: ClassVar[int] = ...
    _period_dtype_code: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    _reso: ClassVar[int] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class SemiMonthBegin(SemiMonthOffset):
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...

class SemiMonthEnd(SemiMonthOffset):
    _min_day_of_month: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...

class SemiMonthOffset(SingleConstructorOffset):
    _attributes: ClassVar[tuple] = ...
    _default_day_of_month: ClassVar[int] = ...
    _min_day_of_month: ClassVar[int] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    day_of_month: Any
    rule_code: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class SingleConstructorOffset(BaseOffset):
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...

class Tick(SingleConstructorOffset):
    _adjust_dst: ClassVar[bool] = ...
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    _td64_unit: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    delta: Any
    nanos: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _next_higher_resolution(self, *args, **kwargs) -> Any: ...
    def _repr_attrs(self, *args, **kwargs) -> Any: ...
    def is_anchored(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __eq__(self, other) -> Any: ...
    def __ge__(self, other) -> Any: ...
    def __gt__(self, other) -> Any: ...
    def __hash__(self) -> Any: ...
    def __le__(self, other) -> Any: ...
    def __lt__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __ne__(self, other) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class Timedelta(pandas._libs.tslibs.timedeltas._Timedelta):
    _req_any_kwargs_new: ClassVar[set] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def __abs__(self) -> Any: ...
    def __add__(self, other) -> Any: ...
    def __divmod__(self, other) -> Any: ...
    def __floordiv__(self, other) -> Any: ...
    def __mod__(self, other) -> Any: ...
    def __mul__(self, other) -> Any: ...
    def __neg__(self) -> Any: ...
    def __pos__(self) -> Any: ...
    def __radd__(self, other) -> Any: ...
    def __rdivmod__(self, other) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __rfloordiv__(self, other) -> Any: ...
    def __rmod__(self, other) -> Any: ...
    def __rmul__(self, other) -> Any: ...
    def __rsub__(self, other) -> Any: ...
    def __rtruediv__(self, other) -> Any: ...
    def __setstate__(self, state) -> Any: ...
    def __sub__(self, other) -> Any: ...
    def __truediv__(self, other) -> Any: ...

class Timestamp(pandas._libs.tslibs.timestamps._Timestamp):
    daysinmonth: Any
    tz: Any
    weekofyear: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _round(self, *args, **kwargs) -> Any: ...
    def astimezone(self, tz = ...) -> Any: ...
    def ceil(self, *args, **kwargs) -> Any: ...
    @classmethod
    def combine(cls, *args, **kwargs) -> Any: ...
    def floor(self, *args, **kwargs) -> Any: ...
    @classmethod
    def fromordinal(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def fromtimestamp(cls, *args, **kwargs) -> Any: ...
    def isoweekday(self, *args, **kwargs) -> Any: ...
    @classmethod
    def now(cls, *args, **kwargs) -> Any: ...
    @overload
    def replace(self, year = ..., hour = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    @overload
    def replace(self, tzinfo = ...) -> Any: ...
    def round(self, *args, **kwargs) -> Any: ...
    def strftime(self, *args, **kwargs) -> Any: ...
    @classmethod
    def strptime(cls, *args, **kwargs) -> Any: ...
    def to_julian_date(self) -> Any: ...
    @classmethod
    def today(cls, *args, **kwargs) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_convert(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self, tz = ...) -> Any: ...
    @overload
    def tz_localize(self) -> Any: ...
    @classmethod
    def utcfromtimestamp(cls, *args, **kwargs) -> Any: ...
    @classmethod
    def utcnow(cls, *args, **kwargs) -> Any: ...
    def weekday(self, *args, **kwargs) -> Any: ...
    @property
    def _freqstr(self) -> Any: ...
    @property
    def freqstr(self) -> Any: ...

class Week(SingleConstructorOffset):
    _attributes: ClassVar[tuple] = ...
    _inc: ClassVar[datetime.timedelta] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _period_dtype_code: Any
    rule_code: Any
    weekday: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def is_anchored(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class WeekOfMonth(WeekOfMonthMixin):
    _attributes: ClassVar[tuple] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def _get_offset_day(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class WeekOfMonthMixin(SingleConstructorOffset):
    rule_code: Any
    week: Any
    weekday: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...

class YearBegin(YearOffset):
    _day_opt: ClassVar[str] = ...
    _default_month: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...

class YearEnd(YearOffset):
    _day_opt: ClassVar[str] = ...
    _default_month: ClassVar[int] = ...
    _prefix: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _period_dtype_code: Any
    def __init__(self, *args, **kwargs) -> None: ...

class YearOffset(SingleConstructorOffset):
    _attributes: ClassVar[tuple] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    month: Any
    rule_code: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...
    def _apply_array(self, *args, **kwargs) -> Any: ...
    @classmethod
    def _from_name(cls, *args, **kwargs) -> Any: ...
    def _get_offset_day(self, *args, **kwargs) -> Any: ...
    def is_on_offset(self, *args, **kwargs) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class _CustomBusinessMonth(BusinessMixin):
    _attributes: ClassVar[tuple] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    cbday_roll: Any
    m_offset: Any
    month_roll: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def _apply(self, *args, **kwargs) -> Any: ...

class cache_readonly:
    fget: Any
    name: Any
    def __init__(self, *args, **kwargs) -> None: ...
    def __delete__(self, *args, **kwargs) -> Any: ...
    def __get__(self, instance, owner) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __set__(self, instance, value) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class relativedelta:
    __init__: ClassVar[function] = ...
    _fix: ClassVar[function] = ...
    _set_months: ClassVar[function] = ...
    normalized: ClassVar[function] = ...
    __abs__: ClassVar[function] = ...
    __add__: ClassVar[function] = ...
    __bool__: ClassVar[function] = ...
    __div__: ClassVar[function] = ...
    __eq__: ClassVar[function] = ...
    __hash__: ClassVar[function] = ...
    __mul__: ClassVar[function] = ...
    __ne__: ClassVar[function] = ...
    __neg__: ClassVar[function] = ...
    __nonzero__: ClassVar[function] = ...
    __radd__: ClassVar[function] = ...
    __rmul__: ClassVar[function] = ...
    __rsub__: ClassVar[function] = ...
    __sub__: ClassVar[function] = ...
    __truediv__: ClassVar[function] = ...
    weeks: Any

def __pyx_unpickle_BaseOffset(*args, **kwargs) -> Any: ...
def __pyx_unpickle_RelativeDeltaOffset(*args, **kwargs) -> Any: ...
def _get_offset(*args, **kwargs) -> Any: ...
def apply_array_wraps(*args, **kwargs) -> Any: ...
def apply_wrapper_core(*args, **kwargs) -> Any: ...
def apply_wraps(*args, **kwargs) -> Any: ...
def delta_to_tick(*args, **kwargs) -> Any: ...
def roll_convention(*args, **kwargs) -> Any: ...
def roll_qtrday(*args, **kwargs) -> Any: ...
def shift_month(*args, **kwargs) -> Any: ...
def shift_months(*args, **kwargs) -> Any: ...
def to_offset(*args, **kwargs) -> Any: ...
