from typing import Any, ClassVar

SIZE_HINT_LIMIT: int
duplicated: fused_cython_function
ismember: fused_cython_function
mode: fused_cython_function
value_count: fused_cython_function

class Complex128HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Complex128Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Complex64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Complex64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Factorizer:
    count: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def get_count(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Float32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Float32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Float64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Float64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class HashTable:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int16HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int16Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int64Factorizer(Factorizer):
    table: Any
    uniques: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_labels_groupby(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_keys_to_values(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int8HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Int8Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class IntpHashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_labels_groupby(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_keys_to_values(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ObjectFactorizer(Factorizer):
    table: Any
    uniques: Any
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class ObjectVector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class PyObjectHashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StringHashTable(HashTable):
    na_string_sentinel: ClassVar[str] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_indexer(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class StringVector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt16HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt16Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt32HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt32Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt64HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt64Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt8HashTable(HashTable):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def _unique(self, *args, **kwargs) -> Any: ...
    def factorize(self, *args, **kwargs) -> Any: ...
    def get_item(self, *args, **kwargs) -> Any: ...
    def get_labels(self, *args, **kwargs) -> Any: ...
    def get_state(self, *args, **kwargs) -> Any: ...
    def lookup(self, *args, **kwargs) -> Any: ...
    def map_locations(self, *args, **kwargs) -> Any: ...
    def set_item(self, *args, **kwargs) -> Any: ...
    def sizeof(self, *args, **kwargs) -> Any: ...
    def unique(self, *args, **kwargs) -> Any: ...
    def __contains__(self, other) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class UInt8Vector(Vector):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def to_array(self, *args, **kwargs) -> Any: ...
    def __len__(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

class Vector:
    @classmethod
    def __init__(cls, *args, **kwargs) -> None: ...
    def __reduce__(self) -> Any: ...
    def __setstate__(self, state) -> Any: ...

def __pyx_unpickle_Enum(*args, **kwargs) -> Any: ...
def __pyx_unpickle_HashTable(*args, **kwargs) -> Any: ...
def _unique_label_indices_int32(*args, **kwargs) -> Any: ...
def _unique_label_indices_int64(*args, **kwargs) -> Any: ...
def get_hashtable_trace_domain(*args, **kwargs) -> Any: ...
def object_hash(*args, **kwargs) -> Any: ...
def objects_are_equal(*args, **kwargs) -> Any: ...
def unique_label_indices(*args, **kwargs) -> Any: ...
