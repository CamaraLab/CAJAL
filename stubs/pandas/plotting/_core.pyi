from _typeshed import Incomplete
from matplotlib.axes import Axes as Axes
from pandas import DataFrame as DataFrame
from pandas._config import get_option as get_option
from pandas._typing import IndexLabel as IndexLabel
from pandas.core.base import PandasObject as PandasObject
from pandas.core.dtypes.common import is_integer as is_integer, is_list_like as is_list_like
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCSeries as ABCSeries
from pandas.util._decorators import Appender as Appender, Substitution as Substitution
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Sequence

def hist_series(self, by: Incomplete | None = ..., ax: Incomplete | None = ..., grid: bool = ..., xlabelsize: Union[int, None] = ..., xrot: Union[float, None] = ..., ylabelsize: Union[int, None] = ..., yrot: Union[float, None] = ..., figsize: Union[tuple[int, int], None] = ..., bins: Union[int, Sequence[int]] = ..., backend: Union[str, None] = ..., legend: bool = ..., **kwargs): ...
def hist_frame(data: DataFrame, column: IndexLabel = ..., by: Incomplete | None = ..., grid: bool = ..., xlabelsize: Union[int, None] = ..., xrot: Union[float, None] = ..., ylabelsize: Union[int, None] = ..., yrot: Union[float, None] = ..., ax: Incomplete | None = ..., sharex: bool = ..., sharey: bool = ..., figsize: Union[tuple[int, int], None] = ..., layout: Union[tuple[int, int], None] = ..., bins: Union[int, Sequence[int]] = ..., backend: Union[str, None] = ..., legend: bool = ..., **kwargs): ...
def boxplot(data: DataFrame, column: Union[str, list[str], None] = ..., by: Union[str, list[str], None] = ..., ax: Union[Axes, None] = ..., fontsize: Union[float, str, None] = ..., rot: int = ..., grid: bool = ..., figsize: Union[tuple[float, float], None] = ..., layout: Union[tuple[int, int], None] = ..., return_type: Union[str, None] = ..., **kwargs): ...
def boxplot_frame(self, column: Incomplete | None = ..., by: Incomplete | None = ..., ax: Incomplete | None = ..., fontsize: Incomplete | None = ..., rot: int = ..., grid: bool = ..., figsize: Incomplete | None = ..., layout: Incomplete | None = ..., return_type: Incomplete | None = ..., backend: Incomplete | None = ..., **kwargs): ...
def boxplot_frame_groupby(grouped, subplots: bool = ..., column: Incomplete | None = ..., fontsize: Incomplete | None = ..., rot: int = ..., grid: bool = ..., ax: Incomplete | None = ..., figsize: Incomplete | None = ..., layout: Incomplete | None = ..., sharex: bool = ..., sharey: bool = ..., backend: Incomplete | None = ..., **kwargs): ...

class PlotAccessor(PandasObject):
    def __init__(self, data) -> None: ...
    def __call__(self, *args, **kwargs): ...
    def line(self, x: Incomplete | None = ..., y: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def bar(self, x: Incomplete | None = ..., y: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def barh(self, x: Incomplete | None = ..., y: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def box(self, by: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def hist(self, by: Incomplete | None = ..., bins: int = ..., **kwargs) -> PlotAccessor: ...
    def kde(self, bw_method: Incomplete | None = ..., ind: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    density: Incomplete
    def area(self, x: Incomplete | None = ..., y: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def pie(self, **kwargs) -> PlotAccessor: ...
    def scatter(self, x, y, s: Incomplete | None = ..., c: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
    def hexbin(self, x, y, C: Incomplete | None = ..., reduce_C_function: Incomplete | None = ..., gridsize: Incomplete | None = ..., **kwargs) -> PlotAccessor: ...
