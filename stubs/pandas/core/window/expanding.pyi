from _typeshed import Incomplete
from pandas import DataFrame as DataFrame, Series as Series
from pandas._typing import Axis as Axis, QuantileInterpolation as QuantileInterpolation, WindowingRankType as WindowingRankType
from pandas.core.generic import NDFrame as NDFrame
from pandas.core.indexers.objects import BaseIndexer as BaseIndexer, ExpandingIndexer as ExpandingIndexer, GroupbyIndexer as GroupbyIndexer
from pandas.core.window.common import maybe_warn_args_and_kwargs as maybe_warn_args_and_kwargs
from pandas.core.window.doc import args_compat as args_compat, create_section_header as create_section_header, kwargs_compat as kwargs_compat, kwargs_numeric_only as kwargs_numeric_only, numba_notes as numba_notes, template_header as template_header, template_returns as template_returns, template_see_also as template_see_also, window_agg_numba_parameters as window_agg_numba_parameters, window_apply_parameters as window_apply_parameters
from pandas.core.window.rolling import BaseWindowGroupby as BaseWindowGroupby, RollingAndExpandingMixin as RollingAndExpandingMixin
from pandas.util._decorators import doc as doc
from typing import Any, Callable

class Expanding(RollingAndExpandingMixin):
    def __init__(self, obj: NDFrame, min_periods: int = ..., center: Union[bool, None] = ..., axis: Axis = ..., method: str = ..., selection: Incomplete | None = ...) -> None: ...
    def aggregate(self, func, *args, **kwargs): ...
    agg: Incomplete
    def count(self, numeric_only: bool = ...): ...
    def apply(self, func: Callable[..., Any], raw: bool = ..., engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., args: Union[tuple[Any, ...], None] = ..., kwargs: Union[dict[str, Any], None] = ...): ...
    def sum(self, numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def max(self, numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def min(self, numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def mean(self, numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def median(self, numeric_only: bool = ..., engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def std(self, ddof: int = ..., numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def var(self, ddof: int = ..., numeric_only: bool = ..., *args, engine: Union[str, None] = ..., engine_kwargs: Union[dict[str, bool], None] = ..., **kwargs): ...
    def sem(self, ddof: int = ..., numeric_only: bool = ..., *args, **kwargs): ...
    def skew(self, numeric_only: bool = ..., **kwargs): ...
    def kurt(self, numeric_only: bool = ..., **kwargs): ...
    def quantile(self, quantile: float, interpolation: QuantileInterpolation = ..., numeric_only: bool = ..., **kwargs): ...
    def rank(self, method: WindowingRankType = ..., ascending: bool = ..., pct: bool = ..., numeric_only: bool = ..., **kwargs): ...
    def cov(self, other: Union[DataFrame, Series, None] = ..., pairwise: Union[bool, None] = ..., ddof: int = ..., numeric_only: bool = ..., **kwargs): ...
    def corr(self, other: Union[DataFrame, Series, None] = ..., pairwise: Union[bool, None] = ..., ddof: int = ..., numeric_only: bool = ..., **kwargs): ...

class ExpandingGroupby(BaseWindowGroupby, Expanding): ...
