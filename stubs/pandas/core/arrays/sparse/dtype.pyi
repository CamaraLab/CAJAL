from pandas._typing import Dtype as Dtype, DtypeObj as DtypeObj, type_t as type_t
from pandas.core.arrays.sparse.array import SparseArray as SparseArray
from pandas.core.dtypes.astype import astype_nansafe as astype_nansafe
from pandas.core.dtypes.base import ExtensionDtype as ExtensionDtype, register_extension_dtype as register_extension_dtype
from pandas.core.dtypes.common import is_bool_dtype as is_bool_dtype, is_object_dtype as is_object_dtype, is_scalar as is_scalar, is_string_dtype as is_string_dtype, pandas_dtype as pandas_dtype
from pandas.core.dtypes.missing import isna as isna, na_value_for_dtype as na_value_for_dtype
from pandas.errors import PerformanceWarning as PerformanceWarning
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Any

class SparseDtype(ExtensionDtype):
    def __init__(self, dtype: Dtype = ..., fill_value: Any = ...) -> None: ...
    def __hash__(self) -> int: ...
    def __eq__(self, other: Any) -> bool: ...
    @property
    def fill_value(self): ...
    @property
    def kind(self) -> str: ...
    @property
    def type(self): ...
    @property
    def subtype(self): ...
    @property
    def name(self) -> str: ...
    @classmethod
    def construct_array_type(cls) -> type_t[SparseArray]: ...
    @classmethod
    def construct_from_string(cls, string: str) -> SparseDtype: ...
    @classmethod
    def is_dtype(cls, dtype: object) -> bool: ...
    def update_dtype(self, dtype) -> SparseDtype: ...
