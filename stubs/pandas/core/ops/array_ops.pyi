import numpy as np
from pandas._libs import NaT as NaT, Timedelta as Timedelta, Timestamp as Timestamp, lib as lib
from pandas._libs.tslibs import BaseOffset as BaseOffset
from pandas._typing import ArrayLike as ArrayLike, Shape as Shape
from pandas.core.construction import ensure_wrapped_if_datetimelike as ensure_wrapped_if_datetimelike
from pandas.core.dtypes.cast import construct_1d_object_array_from_listlike as construct_1d_object_array_from_listlike, find_common_type as find_common_type
from pandas.core.dtypes.common import ensure_object as ensure_object, is_bool_dtype as is_bool_dtype, is_integer_dtype as is_integer_dtype, is_list_like as is_list_like, is_numeric_v_string_like as is_numeric_v_string_like, is_object_dtype as is_object_dtype, is_scalar as is_scalar
from pandas.core.dtypes.generic import ABCExtensionArray as ABCExtensionArray, ABCIndex as ABCIndex, ABCSeries as ABCSeries
from pandas.core.dtypes.missing import isna as isna, notna as notna
from pandas.core.ops import missing as missing, roperator as roperator
from pandas.core.ops.dispatch import should_extension_dispatch as should_extension_dispatch
from pandas.core.ops.invalid import invalid_comparison as invalid_comparison
from typing import Any

def comp_method_OBJECT_ARRAY(op, x, y): ...
def arithmetic_op(left: ArrayLike, right: Any, op): ...
def comparison_op(left: ArrayLike, right: Any, op) -> ArrayLike: ...
def na_logical_op(x: np.ndarray, y, op): ...
def logical_op(left: ArrayLike, right: Any, op) -> ArrayLike: ...
def get_array_op(op): ...
def maybe_prepare_scalar_for_op(obj, shape: Shape): ...
