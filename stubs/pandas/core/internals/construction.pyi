import numpy as np
from numpy.ma.mrecords import MaskedRecords
from pandas._libs import lib as lib
from pandas._typing import ArrayLike as ArrayLike, DtypeObj as DtypeObj, Manager as Manager
from pandas.core import algorithms as algorithms
from pandas.core.arrays import Categorical as Categorical, DatetimeArray as DatetimeArray, ExtensionArray as ExtensionArray, TimedeltaArray as TimedeltaArray
from pandas.core.construction import ensure_wrapped_if_datetimelike as ensure_wrapped_if_datetimelike, extract_array as extract_array, range_to_ndarray as range_to_ndarray, sanitize_array as sanitize_array
from pandas.core.dtypes.cast import construct_1d_arraylike_from_scalar as construct_1d_arraylike_from_scalar, dict_compat as dict_compat, maybe_cast_to_datetime as maybe_cast_to_datetime, maybe_convert_platform as maybe_convert_platform, maybe_infer_to_datetimelike as maybe_infer_to_datetimelike, maybe_upcast as maybe_upcast
from pandas.core.dtypes.common import is_1d_only_ea_dtype as is_1d_only_ea_dtype, is_datetime_or_timedelta_dtype as is_datetime_or_timedelta_dtype, is_dtype_equal as is_dtype_equal, is_extension_array_dtype as is_extension_array_dtype, is_integer_dtype as is_integer_dtype, is_list_like as is_list_like, is_named_tuple as is_named_tuple, is_object_dtype as is_object_dtype
from pandas.core.dtypes.generic import ABCDataFrame as ABCDataFrame, ABCSeries as ABCSeries
from pandas.core.indexes.api import DatetimeIndex as DatetimeIndex, Index as Index, TimedeltaIndex as TimedeltaIndex, default_index as default_index, ensure_index as ensure_index, get_objs_combined_axis as get_objs_combined_axis, union_indexes as union_indexes
from pandas.core.internals.array_manager import ArrayManager as ArrayManager, SingleArrayManager as SingleArrayManager
from pandas.core.internals.blocks import BlockPlacement as BlockPlacement, ensure_block_shape as ensure_block_shape, new_block_2d as new_block_2d
from pandas.core.internals.managers import BlockManager as BlockManager, SingleBlockManager as SingleBlockManager, create_block_manager_from_blocks as create_block_manager_from_blocks, create_block_manager_from_column_arrays as create_block_manager_from_column_arrays
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Sequence

def arrays_to_mgr(arrays, columns: Index, index, *, dtype: Union[DtypeObj, None] = ..., verify_integrity: bool = ..., typ: Union[str, None] = ..., consolidate: bool = ...) -> Manager: ...
def rec_array_to_mgr(data: Union[MaskedRecords, np.recarray, np.ndarray], index, columns, dtype: Union[DtypeObj, None], copy: bool, typ: str) -> Manager: ...
def fill_masked_arrays(data: MaskedRecords, arr_columns: Index) -> list[np.ndarray]: ...
def mgr_to_mgr(mgr, typ: str, copy: bool = ...): ...
def ndarray_to_mgr(values, index, columns, dtype: Union[DtypeObj, None], copy: bool, typ: str) -> Manager: ...
def dict_to_mgr(data: dict, index, columns, *, dtype: Union[DtypeObj, None] = ..., typ: str = ..., copy: bool = ...) -> Manager: ...
def nested_data_to_arrays(data: Sequence, columns: Union[Index, None], index: Union[Index, None], dtype: Union[DtypeObj, None]) -> tuple[list[ArrayLike], Index, Index]: ...
def treat_as_nested(data) -> bool: ...
def reorder_arrays(arrays: list[ArrayLike], arr_columns: Index, columns: Union[Index, None], length: int) -> tuple[list[ArrayLike], Index]: ...
def dataclasses_to_dicts(data): ...
def to_arrays(data, columns: Union[Index, None], dtype: Union[DtypeObj, None] = ...) -> tuple[list[ArrayLike], Index]: ...
