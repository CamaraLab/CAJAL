from _typeshed import Incomplete

class LinearOperator:
    ndim: int
    __array_ufunc__: Incomplete
    def __new__(cls, *args, **kwargs): ...
    dtype: Incomplete
    shape: Incomplete
    def __init__(self, dtype, shape) -> None: ...
    def matvec(self, x): ...
    def rmatvec(self, x): ...
    def matmat(self, X): ...
    def rmatmat(self, X): ...
    def __call__(self, x): ...
    def __mul__(self, x): ...
    def __truediv__(self, other): ...
    def dot(self, x): ...
    def __matmul__(self, other): ...
    def __rmatmul__(self, other): ...
    def __rmul__(self, x): ...
    def __pow__(self, p): ...
    def __add__(self, x): ...
    def __neg__(self): ...
    def __sub__(self, x): ...
    def adjoint(self): ...
    H: Incomplete
    def transpose(self): ...
    T: Incomplete

class _CustomLinearOperator(LinearOperator):
    args: Incomplete
    def __init__(self, shape, matvec, rmatvec: Incomplete | None = ..., matmat: Incomplete | None = ..., dtype: Incomplete | None = ..., rmatmat: Incomplete | None = ...) -> None: ...

class _AdjointLinearOperator(LinearOperator):
    A: Incomplete
    args: Incomplete
    def __init__(self, A) -> None: ...

class _TransposedLinearOperator(LinearOperator):
    A: Incomplete
    args: Incomplete
    def __init__(self, A) -> None: ...

class _SumLinearOperator(LinearOperator):
    args: Incomplete
    def __init__(self, A, B) -> None: ...

class _ProductLinearOperator(LinearOperator):
    args: Incomplete
    def __init__(self, A, B) -> None: ...

class _ScaledLinearOperator(LinearOperator):
    args: Incomplete
    def __init__(self, A, alpha) -> None: ...

class _PowerLinearOperator(LinearOperator):
    args: Incomplete
    def __init__(self, A, p) -> None: ...

class MatrixLinearOperator(LinearOperator):
    A: Incomplete
    args: Incomplete
    def __init__(self, A) -> None: ...

class _AdjointMatrixOperator(MatrixLinearOperator):
    A: Incomplete
    args: Incomplete
    shape: Incomplete
    def __init__(self, adjoint) -> None: ...
    @property
    def dtype(self): ...

class IdentityOperator(LinearOperator):
    def __init__(self, shape, dtype: Incomplete | None = ...) -> None: ...

def aslinearoperator(A): ...
