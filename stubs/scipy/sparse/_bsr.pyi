from ._base import sparray
from ._compressed import _cs_matrix
from ._data import _minmax_mixin
from ._matrix import spmatrix
from _typeshed import Incomplete

class _bsr_base(_cs_matrix, _minmax_mixin):
    data: Incomplete
    indices: Incomplete
    indptr: Incomplete
    def __init__(self, arg1, shape: Incomplete | None = ..., dtype: Incomplete | None = ..., copy: bool = ..., blocksize: Incomplete | None = ...) -> None: ...
    def check_format(self, full_check: bool = ...) -> None: ...
    blocksize: Incomplete
    def diagonal(self, k: int = ...): ...
    def __getitem__(self, key) -> None: ...
    def __setitem__(self, key, val) -> None: ...
    def tobsr(self, blocksize: Incomplete | None = ..., copy: bool = ...): ...
    def tocsr(self, copy: bool = ...): ...
    def tocsc(self, copy: bool = ...): ...
    def tocoo(self, copy: bool = ...): ...
    def toarray(self, order: Incomplete | None = ..., out: Incomplete | None = ...): ...
    def transpose(self, axes: Incomplete | None = ..., copy: bool = ...): ...
    def eliminate_zeros(self) -> None: ...
    has_canonical_format: bool
    def sum_duplicates(self) -> None: ...
    has_sorted_indices: bool
    def sort_indices(self) -> None: ...
    def prune(self) -> None: ...

def isspmatrix_bsr(x): ...

class bsr_array(_bsr_base, sparray): ...
class bsr_matrix(spmatrix, _bsr_base): ...
