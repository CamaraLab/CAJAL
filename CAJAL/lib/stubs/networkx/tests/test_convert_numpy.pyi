from _typeshed import Incomplete
from networkx.generators.classic import barbell_graph as barbell_graph, cycle_graph as cycle_graph, path_graph as path_graph
from networkx.utils import graphs_equal as graphs_equal

np: Incomplete
npt: Incomplete

def test_to_numpy_matrix_deprecation() -> None: ...
def test_from_numpy_matrix_deprecation() -> None: ...
def test_to_numpy_recarray_deprecation() -> None: ...

class TestConvertNumpyMatrix:
    G1: Incomplete
    G2: Incomplete
    G3: Incomplete
    G4: Incomplete
    def setup_method(self) -> None: ...
    def test_exceptions(self) -> None: ...
    def create_weighted(self, G): ...
    def assert_equal(self, G1, G2) -> None: ...
    def identity_conversion(self, G, A, create_using) -> None: ...
    def test_shape(self) -> None: ...
    def test_identity_graph_matrix(self) -> None: ...
    def test_identity_graph_array(self) -> None: ...
    def test_identity_digraph_matrix(self) -> None: ...
    def test_identity_digraph_array(self) -> None: ...
    def test_identity_weighted_graph_matrix(self) -> None: ...
    def test_identity_weighted_graph_array(self) -> None: ...
    def test_identity_weighted_digraph_matrix(self) -> None: ...
    def test_identity_weighted_digraph_array(self) -> None: ...
    def test_nodelist(self) -> None: ...
    def test_weight_keyword(self) -> None: ...
    def test_from_numpy_matrix_type(self) -> None: ...
    def test_from_numpy_matrix_dtype(self) -> None: ...
    def test_to_numpy_recarray(self) -> None: ...
    def test_numpy_multigraph(self) -> None: ...
    def test_from_numpy_matrix_parallel_edges(self) -> None: ...
    def test_symmetric(self) -> None: ...
    def test_dtype_int_graph(self) -> None: ...
    def test_dtype_int_multigraph(self) -> None: ...

class TestConvertNumpyArray:
    G1: Incomplete
    G2: Incomplete
    G3: Incomplete
    G4: Incomplete
    def setup_method(self) -> None: ...
    def create_weighted(self, G): ...
    def assert_equal(self, G1, G2) -> None: ...
    def identity_conversion(self, G, A, create_using) -> None: ...
    def test_shape(self) -> None: ...
    def test_identity_graph_array(self) -> None: ...
    def test_identity_digraph_array(self) -> None: ...
    def test_identity_weighted_graph_array(self) -> None: ...
    def test_identity_weighted_digraph_array(self) -> None: ...
    def test_nodelist(self) -> None: ...
    def test_weight_keyword(self) -> None: ...
    def test_from_numpy_array_type(self) -> None: ...
    def test_from_numpy_array_dtype(self) -> None: ...
    def test_from_numpy_array_parallel_edges(self) -> None: ...
    def test_symmetric(self) -> None: ...
    def test_dtype_int_graph(self) -> None: ...
    def test_dtype_int_multigraph(self) -> None: ...

def recarray_test_graph(): ...
def test_to_numpy_recarray(recarray_test_graph) -> None: ...
def test_to_numpy_recarray_default_dtype(recarray_test_graph) -> None: ...
def test_to_numpy_recarray_directed(recarray_test_graph) -> None: ...
def test_to_numpy_recarray_default_dtype_no_weight() -> None: ...
def recarray_nodelist_test_graph(): ...
def test_to_numpy_recarray_nodelist(recarray_nodelist_test_graph) -> None: ...
def test_to_numpy_recarray_bad_nodelist(recarray_nodelist_test_graph, nodelist, errmsg) -> None: ...
def multigraph_test_graph(): ...
def test_numpy_multigraph(multigraph_test_graph, operator, expected) -> None: ...
def test_to_numpy_array_multigraph_nodelist(multigraph_test_graph) -> None: ...
def test_to_numpy_array_complex_weights(G, expected) -> None: ...
def test_to_numpy_array_arbitrary_weights() -> None: ...
def test_to_numpy_array_multiweight_reduction(func, expected) -> None: ...
def test_to_numpy_array_structured_dtype_attrs_from_fields(G, expected) -> None: ...
def test_to_numpy_array_structured_dtype_single_attr_default() -> None: ...
def test_to_numpy_array_structured_dtype_single_attr(field_name, expected_attr_val) -> None: ...
def test_to_numpy_array_structured_dtype_multiple_fields(graph_type, edge) -> None: ...
def test_to_numpy_array_structured_dtype_scalar_nonedge(G) -> None: ...
def test_to_numpy_array_structured_dtype_nonedge_ary(G) -> None: ...
def test_to_numpy_array_structured_dtype_with_weight_raises() -> None: ...
def test_to_numpy_array_structured_multigraph_raises(graph_type) -> None: ...
