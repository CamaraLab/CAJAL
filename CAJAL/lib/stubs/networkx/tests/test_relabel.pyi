from networkx.generators.classic import empty_graph as empty_graph
from networkx.utils import edges_equal as edges_equal, nodes_equal as nodes_equal

class TestRelabel:
    def test_convert_node_labels_to_integers(self) -> None: ...
    def test_convert_to_integers2(self) -> None: ...
    def test_convert_to_integers_raise(self) -> None: ...
    def test_relabel_nodes_copy(self) -> None: ...
    def test_relabel_nodes_function(self): ...
    def test_relabel_nodes_classes(self) -> None: ...
    def test_relabel_nodes_graph(self) -> None: ...
    def test_relabel_nodes_orderedgraph(self) -> None: ...
    def test_relabel_nodes_digraph(self) -> None: ...
    def test_relabel_nodes_multigraph(self) -> None: ...
    def test_relabel_nodes_multidigraph(self) -> None: ...
    def test_relabel_isolated_nodes_to_same(self) -> None: ...
    def test_relabel_nodes_missing(self) -> None: ...
    def test_relabel_copy_name(self) -> None: ...
    def test_relabel_toposort(self) -> None: ...
    def test_relabel_selfloop(self) -> None: ...
    def test_relabel_multidigraph_inout_merge_nodes(self) -> None: ...
    def test_relabel_multigraph_merge_inplace(self) -> None: ...
    def test_relabel_multidigraph_merge_inplace(self) -> None: ...
    def test_relabel_multidigraph_inout_copy(self) -> None: ...
    def test_relabel_multigraph_merge_copy(self) -> None: ...
    def test_relabel_multidigraph_merge_copy(self) -> None: ...
    def test_relabel_multigraph_nonnumeric_key(self) -> None: ...
    def test_relabel_circular(self) -> None: ...
