from _typeshed import Incomplete
from networkx.utils import PythonRandomInterface as PythonRandomInterface, arbitrary_element as arbitrary_element, create_py_random_state as create_py_random_state, create_random_state as create_random_state, dict_to_numpy_array as dict_to_numpy_array, discrete_sequence as discrete_sequence, flatten as flatten, groups as groups, is_string_like as is_string_like, iterable as iterable, make_list_of_ints as make_list_of_ints, make_str as make_str, pairwise as pairwise, powerlaw_sequence as powerlaw_sequence, to_tuple as to_tuple

nested_depth: Incomplete
nested_set: Incomplete
nested_mixed: Incomplete

def test_flatten(nested, result) -> None: ...
def test_is_string_like() -> None: ...
def test_iterable() -> None: ...
def test_graph_iterable() -> None: ...
def test_make_list_of_ints() -> None: ...
def test_random_number_distribution() -> None: ...
def test_make_str_with_bytes() -> None: ...
def test_make_str_with_unicode() -> None: ...

class TestNumpyArray:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_numpy_to_list_of_ints(self) -> None: ...
    def test__dict_to_numpy_array1(self) -> None: ...
    def test__dict_to_numpy_array2(self) -> None: ...
    def test_dict_to_numpy_array_a(self) -> None: ...
    def test_dict_to_numpy_array_b(self) -> None: ...

def test_pairwise() -> None: ...
def test_groups() -> None: ...
def test_to_tuple() -> None: ...
def test_create_random_state() -> None: ...
def test_create_py_random_state() -> None: ...
def test_PythonRandomInterface_RandomState() -> None: ...
def test_PythonRandomInterface_Generator() -> None: ...
def test_arbitrary_element(iterable_type, expected) -> None: ...
def test_arbitrary_element_raises(iterator) -> None: ...
def test_dict_to_numpy_array_deprecations() -> None: ...
