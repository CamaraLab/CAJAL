from _typeshed import Incomplete
from collections.abc import Generator
from networkx.readwrite.gml import literal_destringizer as literal_destringizer, literal_stringizer as literal_stringizer

class TestGraph:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_parse_gml_cytoscape_bug(self) -> None: ...
    def test_parse_gml(self) -> None: ...
    def test_read_gml(self) -> None: ...
    def test_labels_are_strings(self) -> None: ...
    def test_relabel_duplicate(self) -> None: ...
    def test_tuplelabels(self) -> None: ...
    def test_quotes(self) -> None: ...
    def test_unicode_node(self) -> None: ...
    def test_float_label(self) -> None: ...
    def test_special_float_label(self) -> None: ...
    def test_name(self) -> None: ...
    def test_graph_types(self) -> None: ...
    def test_data_types(self) -> None: ...
    def test_escape_unescape(self) -> None: ...
    def test_exceptions(self): ...
    def test_label_kwarg(self) -> None: ...
    def test_outofrange_integers(self) -> None: ...

def byte_file() -> Generator[Incomplete, None, None]: ...

class TestPropertyLists:
    def test_writing_graph_with_multi_element_property_list(self) -> None: ...
    def test_writing_graph_with_one_element_property_list(self) -> None: ...
    def test_reading_graph_with_list_property(self) -> None: ...
    def test_reading_graph_with_single_element_list_property(self) -> None: ...
