from _typeshed import Incomplete
from networkx.utils import edges_equal as edges_equal, graphs_equal as graphs_equal, nodes_equal as nodes_equal

edges_no_data: Incomplete
edges_with_values: Incomplete
edges_with_weight: Incomplete
edges_with_multiple_attrs: Incomplete
edges_with_multiple_attrs_csv: Incomplete

def test_read_edgelist_no_data(data, extra_kwargs) -> None: ...
def test_read_weighted_edgelist() -> None: ...
def test_read_edgelist_with_data(data, extra_kwargs, expected) -> None: ...
def example_graph(): ...
def test_parse_edgelist_no_data(example_graph) -> None: ...
def test_parse_edgelist_with_data_dict(example_graph) -> None: ...
def test_parse_edgelist_with_data_list(example_graph) -> None: ...
def test_parse_edgelist() -> None: ...
def test_comments_None() -> None: ...

class TestEdgelist:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_write_edgelist_1(self) -> None: ...
    def test_write_edgelist_2(self) -> None: ...
    def test_write_edgelist_3(self) -> None: ...
    def test_write_edgelist_4(self) -> None: ...
    def test_unicode(self) -> None: ...
    def test_latin1_issue(self) -> None: ...
    def test_latin1(self) -> None: ...
    def test_edgelist_graph(self) -> None: ...
    def test_edgelist_digraph(self) -> None: ...
    def test_edgelist_integers(self) -> None: ...
    def test_edgelist_multigraph(self) -> None: ...
    def test_edgelist_multidigraph(self) -> None: ...
