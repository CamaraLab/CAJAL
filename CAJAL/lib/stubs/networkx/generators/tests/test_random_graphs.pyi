def test_gnp_generators_negative_edge_probability(generator, directed) -> None: ...
def test_gnp_generators_greater_than_1_edge_probability(generator, directed, expected_num_edges) -> None: ...
def test_gnp_generators_basic(generator, directed) -> None: ...
def test_gnp_generators_for_p_close_to_1(generator) -> None: ...
def test_gnp_generators_edge_probability(generator, p, directed) -> None: ...
def test_gnp_random_graph_aliases(generator, seed, directed, expected_num_edges) -> None: ...

class TestGeneratorsRandom:
    def test_random_graph(self): ...
    def test_dual_barabasi_albert(self, m1: int = ..., m2: int = ..., p: float = ...) -> None: ...
    def test_extended_barabasi_albert(self, m: int = ...) -> None: ...
    def test_random_zero_regular_graph(self) -> None: ...
    def test_gnm(self) -> None: ...
    def test_watts_strogatz_big_k(self) -> None: ...
    def test_random_kernel_graph(self): ...
