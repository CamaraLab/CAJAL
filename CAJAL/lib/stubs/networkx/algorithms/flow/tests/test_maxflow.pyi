from _typeshed import Incomplete
from networkx.algorithms.flow import boykov_kolmogorov as boykov_kolmogorov, build_flow_dict as build_flow_dict, build_residual_network as build_residual_network, dinitz as dinitz, edmonds_karp as edmonds_karp, preflow_push as preflow_push, shortest_augmenting_path as shortest_augmenting_path

flow_funcs: Incomplete
max_min_funcs: Incomplete
flow_value_funcs: Incomplete
interface_funcs: Incomplete
all_funcs: Incomplete

def compute_cutset(G, partition): ...
def validate_flows(G, s, t, flowDict, solnValue, capacity, flow_func) -> None: ...
def validate_cuts(G, s, t, solnValue, partition, capacity, flow_func) -> None: ...
def compare_flows_and_cuts(G, s, t, solnFlows, solnValue, capacity: str = ...) -> None: ...

class TestMaxflowMinCutCommon:
    def test_graph1(self) -> None: ...
    def test_graph2(self) -> None: ...
    def test_digraph1(self) -> None: ...
    def test_digraph2(self) -> None: ...
    def test_digraph3(self) -> None: ...
    def test_digraph4(self) -> None: ...
    def test_wikipedia_dinitz_example(self) -> None: ...
    def test_optional_capacity(self) -> None: ...
    def test_digraph_infcap_edges(self) -> None: ...
    def test_digraph_infcap_path(self) -> None: ...
    def test_graph_infcap_edges(self) -> None: ...
    def test_digraph5(self) -> None: ...
    def test_disconnected(self) -> None: ...
    def test_source_target_not_in_graph(self) -> None: ...
    def test_source_target_coincide(self) -> None: ...
    def test_multigraphs_raise(self) -> None: ...

class TestMaxFlowMinCutInterface:
    G: Incomplete
    H: Incomplete
    def setup(self) -> None: ...
    def test_flow_func_not_callable(self) -> None: ...
    def test_flow_func_parameters(self) -> None: ...
    def test_minimum_cut_no_cutoff(self) -> None: ...
    def test_kwargs(self) -> None: ...
    def test_kwargs_default_flow_func(self) -> None: ...
    def test_reusing_residual(self) -> None: ...

def test_preflow_push_global_relabel_freq() -> None: ...
def test_preflow_push_makes_enough_space() -> None: ...
def test_shortest_augmenting_path_two_phase() -> None: ...

class TestCutoff:
    def test_cutoff(self) -> None: ...
    def test_complete_graph_cutoff(self) -> None: ...
