from _typeshed import Incomplete
from networkx.utils import edges_equal as edges_equal, nodes_equal as nodes_equal

def test_unknown_algorithm() -> None: ...

class MinimumSpanningTreeTestBase:
    algo: Incomplete
    G: Incomplete
    minimum_spanning_edgelist: Incomplete
    maximum_spanning_edgelist: Incomplete
    def setup_method(self, method) -> None: ...
    def test_minimum_edges(self) -> None: ...
    def test_maximum_edges(self) -> None: ...
    def test_without_data(self) -> None: ...
    def test_nan_weights(self) -> None: ...
    def test_nan_weights_order(self) -> None: ...
    def test_isolated_node(self) -> None: ...
    def test_minimum_tree(self) -> None: ...
    def test_maximum_tree(self) -> None: ...
    def test_disconnected(self) -> None: ...
    def test_empty_graph(self) -> None: ...
    def test_attributes(self) -> None: ...
    def test_weight_attribute(self) -> None: ...

class TestBoruvka(MinimumSpanningTreeTestBase):
    algorithm: str
    def test_unicode_name(self) -> None: ...

class MultigraphMSTTestBase(MinimumSpanningTreeTestBase):
    def test_multigraph_keys_min(self) -> None: ...
    def test_multigraph_keys_max(self) -> None: ...

class TestKruskal(MultigraphMSTTestBase):
    algorithm: str

class TestPrim(MultigraphMSTTestBase):
    algorithm: str
    def test_multigraph_keys_tree(self) -> None: ...
    def test_multigraph_keys_tree_max(self) -> None: ...

class TestSpanningTreeIterator:
    G: Incomplete
    spanning_trees: Incomplete
    def setup(self) -> None: ...
    def test_minimum_spanning_tree_iterator(self) -> None: ...
    def test_maximum_spanning_tree_iterator(self) -> None: ...

def test_random_spanning_tree_multiplicative_small() -> None: ...
def test_random_spanning_tree_multiplicative_large() -> None: ...
def test_random_spanning_tree_additive_small() -> None: ...
def test_random_spanning_tree_additive_large() -> None: ...
