from _typeshed import Incomplete
from networkx.algorithms.tree import branchings as branchings, recognition as recognition

np: Incomplete
G_array: Incomplete

def G1(): ...
def G2(): ...

optimal_arborescence_1: Incomplete
optimal_branching_2a: Incomplete
optimal_branching_2b: Incomplete
optimal_arborescence_2: Incomplete
greedy_subopt_branching_1a: Incomplete
greedy_subopt_branching_1b: Incomplete

def build_branching(edges): ...
def sorted_edges(G, attr: str = ..., default: int = ...): ...
def assert_equal_branchings(G1, G2, attr: str = ..., default: int = ...) -> None: ...
def test_optimal_branching1() -> None: ...
def test_optimal_branching2a() -> None: ...
def test_optimal_branching2b() -> None: ...
def test_optimal_arborescence2() -> None: ...
def test_greedy_suboptimal_branching1a() -> None: ...
def test_greedy_suboptimal_branching1b() -> None: ...
def test_greedy_max1() -> None: ...
def test_greedy_max2() -> None: ...
def test_greedy_max3() -> None: ...
def test_greedy_min() -> None: ...
def test_edmonds1_maxbranch() -> None: ...
def test_edmonds1_maxarbor() -> None: ...
def test_edmonds2_maxbranch() -> None: ...
def test_edmonds2_maxarbor() -> None: ...
def test_edmonds2_minarbor() -> None: ...
def test_edmonds3_minbranch1() -> None: ...
def test_edmonds3_minbranch2() -> None: ...
def test_mst() -> None: ...
def test_mixed_nodetypes() -> None: ...
def test_edmonds1_minbranch() -> None: ...
def test_edge_attribute_preservation_normal_graph() -> None: ...
def test_edge_attribute_preservation_multigraph() -> None: ...
def test_edge_attribute_discard() -> None: ...
def test_partition_spanning_arborescence() -> None: ...
def test_arborescence_iterator_min() -> None: ...
def test_arborescence_iterator_max() -> None: ...
def test_arborescence_iterator_initial_partition() -> None: ...
