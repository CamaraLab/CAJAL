import networkx as nx
from _typeshed import Incomplete

is_coloring = nx.algorithms.coloring.equitable_coloring.is_coloring
is_equitable = nx.algorithms.coloring.equitable_coloring.is_equitable
ALL_STRATEGIES: Incomplete
INTERCHANGE_INVALID: Incomplete

class TestColoring:
    def test_basic_cases(self) -> None: ...
    def test_special_cases(self) -> None: ...
    def test_interchange_invalid(self) -> None: ...
    def test_bad_inputs(self) -> None: ...
    def test_strategy_as_function(self) -> None: ...
    def test_seed_argument(self): ...
    def test_is_coloring(self) -> None: ...
    def test_is_equitable(self) -> None: ...
    def test_num_colors(self) -> None: ...
    def test_equitable_color(self) -> None: ...
    def test_equitable_color_empty(self) -> None: ...
    def test_equitable_color_large(self) -> None: ...
    def test_case_V_plus_not_in_A_cal(self) -> None: ...
    def test_cast_no_solo(self) -> None: ...
    def test_hard_prob(self) -> None: ...
    def test_hardest_prob(self) -> None: ...

def verify_coloring(graph, coloring): ...
def verify_length(coloring, expected): ...
def dict_to_sets(colors): ...
def empty_graph(): ...
def one_node_graph(): ...
def two_node_graph(): ...
def three_node_clique(): ...
def disconnected(): ...
def rs_shc(): ...
def slf_shc(): ...
def slf_hc(): ...
def lf_shc(): ...
def lf_hc(): ...
def sl_shc(): ...
def sl_hc(): ...
def gis_shc(): ...
def gis_hc(): ...
def cs_shc(): ...
def rsi_shc(): ...
def lfi_shc(): ...
def lfi_hc(): ...
def sli_shc(): ...
def sli_hc(): ...

BASIC_TEST_CASES: Incomplete
SPECIAL_TEST_CASES: Incomplete

def check_state(L, N, H, F, C) -> None: ...
def max_degree(G): ...
def make_params_from_graph(G, F): ...
