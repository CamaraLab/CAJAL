from _typeshed import Incomplete
from collections.abc import Generator
from networkx.utils import arbitrary_element as arbitrary_element, pairwise as pairwise

class TestIsSimplePath:
    def test_empty_list(self) -> None: ...
    def test_trivial_path(self) -> None: ...
    def test_trivial_nonpath(self) -> None: ...
    def test_simple_path(self) -> None: ...
    def test_non_simple_path(self) -> None: ...
    def test_cycle(self) -> None: ...
    def test_missing_node(self) -> None: ...
    def test_directed_path(self) -> None: ...
    def test_directed_non_path(self) -> None: ...
    def test_directed_cycle(self) -> None: ...
    def test_multigraph(self) -> None: ...
    def test_multidigraph(self) -> None: ...

def test_all_simple_paths() -> None: ...
def test_all_simple_paths_with_two_targets_emits_two_paths() -> None: ...
def test_digraph_all_simple_paths_with_two_targets_emits_two_paths() -> None: ...
def test_all_simple_paths_with_two_targets_cutoff() -> None: ...
def test_digraph_all_simple_paths_with_two_targets_cutoff() -> None: ...
def test_all_simple_paths_with_two_targets_in_line_emits_two_paths() -> None: ...
def test_all_simple_paths_ignores_cycle() -> None: ...
def test_all_simple_paths_with_two_targets_inside_cycle_emits_two_paths() -> None: ...
def test_all_simple_paths_source_target() -> None: ...
def test_all_simple_paths_cutoff() -> None: ...
def test_all_simple_paths_on_non_trivial_graph() -> None: ...
def test_all_simple_paths_multigraph() -> None: ...
def test_all_simple_paths_multigraph_with_cutoff() -> None: ...
def test_all_simple_paths_directed() -> None: ...
def test_all_simple_paths_empty() -> None: ...
def test_all_simple_paths_corner_cases() -> None: ...
def hamiltonian_path(G, source) -> Generator[Incomplete, None, None]: ...
def test_hamiltonian_path() -> None: ...
def test_cutoff_zero() -> None: ...
def test_source_missing() -> None: ...
def test_target_missing() -> None: ...
def test_all_simple_edge_paths() -> None: ...
def test_all_simple_edge_paths_with_two_targets_emits_two_paths() -> None: ...
def test_digraph_all_simple_edge_paths_with_two_targets_emits_two_paths() -> None: ...
def test_all_simple_edge_paths_with_two_targets_cutoff() -> None: ...
def test_digraph_all_simple_edge_paths_with_two_targets_cutoff() -> None: ...
def test_all_simple_edge_paths_with_two_targets_in_line_emits_two_paths() -> None: ...
def test_all_simple_edge_paths_ignores_cycle() -> None: ...
def test_all_simple_edge_paths_with_two_targets_inside_cycle_emits_two_paths() -> None: ...
def test_all_simple_edge_paths_source_target() -> None: ...
def test_all_simple_edge_paths_cutoff() -> None: ...
def test_all_simple_edge_paths_on_non_trivial_graph() -> None: ...
def test_all_simple_edge_paths_multigraph() -> None: ...
def test_all_simple_edge_paths_multigraph_with_cutoff() -> None: ...
def test_all_simple_edge_paths_directed() -> None: ...
def test_all_simple_edge_paths_empty() -> None: ...
def test_all_simple_edge_paths_corner_cases() -> None: ...
def hamiltonian_edge_path(G, source) -> Generator[Incomplete, None, None]: ...
def test_hamiltonian__edge_path() -> None: ...
def test_edge_cutoff_zero() -> None: ...
def test_edge_source_missing() -> None: ...
def test_edge_target_missing() -> None: ...
def test_shortest_simple_paths() -> None: ...
def test_shortest_simple_paths_directed() -> None: ...
def test_shortest_simple_paths_directed_with_weight_fucntion(): ...
def test_shortest_simple_paths_with_weight_fucntion(): ...
def test_Greg_Bernstein() -> None: ...
def test_weighted_shortest_simple_path(): ...
def test_directed_weighted_shortest_simple_path(): ...
def test_weighted_shortest_simple_path_issue2427() -> None: ...
def test_directed_weighted_shortest_simple_path_issue2427() -> None: ...
def test_weight_name() -> None: ...
def test_ssp_source_missing() -> None: ...
def test_ssp_target_missing() -> None: ...
def test_ssp_multigraph() -> None: ...
def test_ssp_source_missing2() -> None: ...
def test_bidirectional_shortest_path_restricted_cycle() -> None: ...
def test_bidirectional_shortest_path_restricted_wheel() -> None: ...
def test_bidirectional_shortest_path_restricted_directed_cycle() -> None: ...
def test_bidirectional_shortest_path_ignore() -> None: ...
def validate_path(G, s, t, soln_len, path) -> None: ...
def validate_length_path(G, s, t, soln_len, length, path) -> None: ...
def test_bidirectional_dijksta_restricted() -> None: ...
def test_bidirectional_dijkstra_no_path() -> None: ...
def test_bidirectional_dijkstra_ignore() -> None: ...
