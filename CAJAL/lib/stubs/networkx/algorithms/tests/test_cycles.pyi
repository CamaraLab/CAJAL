from networkx.algorithms import find_cycle as find_cycle, minimum_cycle_basis as minimum_cycle_basis
from networkx.algorithms.traversal.edgedfs import FORWARD as FORWARD, REVERSE as REVERSE

class TestCycles:
    @classmethod
    def setup_class(cls) -> None: ...
    def is_cyclic_permutation(self, a, b): ...
    def test_cycle_basis(self) -> None: ...
    def test_cycle_basis2(self) -> None: ...
    def test_cycle_basis3(self) -> None: ...
    def test_simple_cycles(self) -> None: ...
    def test_simple_cycles_graph(self) -> None: ...
    def test_unsortable(self) -> None: ...
    def test_simple_cycles_small(self) -> None: ...
    def test_simple_cycles_empty(self) -> None: ...
    def test_complete_directed_graph(self) -> None: ...
    def worst_case_graph(self, k): ...
    def test_worst_case_graph(self) -> None: ...
    def test_recursive_simple_and_not(self) -> None: ...
    def test_simple_graph_with_reported_bug(self) -> None: ...

class TestFindCycle:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_graph_nocycle(self) -> None: ...
    def test_graph_cycle(self) -> None: ...
    def test_graph_orientation_none(self) -> None: ...
    def test_graph_orientation_original(self) -> None: ...
    def test_digraph(self) -> None: ...
    def test_digraph_orientation_none(self) -> None: ...
    def test_digraph_orientation_original(self) -> None: ...
    def test_multigraph(self) -> None: ...
    def test_multidigraph(self) -> None: ...
    def test_digraph_ignore(self) -> None: ...
    def test_digraph_reverse(self) -> None: ...
    def test_multidigraph_ignore(self) -> None: ...
    def test_multidigraph_ignore2(self) -> None: ...
    def test_multidigraph_original(self) -> None: ...
    def test_dag(self) -> None: ...
    def test_prev_explored(self) -> None: ...
    def test_no_cycle(self) -> None: ...

def assert_basis_equal(a, b) -> None: ...

class TestMinimumCycles:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_unweighted_diamond(self) -> None: ...
    def test_weighted_diamond(self) -> None: ...
    def test_dimensionality(self) -> None: ...
    def test_complete_graph(self) -> None: ...
    def test_tree_graph(self) -> None: ...
