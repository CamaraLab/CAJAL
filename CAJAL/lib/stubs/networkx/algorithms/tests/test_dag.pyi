from _typeshed import Incomplete
from networkx.utils import edges_equal as edges_equal, pairwise as pairwise

class TestDagLongestPath:
    def test_empty(self) -> None: ...
    def test_unweighted1(self) -> None: ...
    def test_unweighted2(self) -> None: ...
    def test_weighted(self) -> None: ...
    def test_undirected_not_implemented(self) -> None: ...
    def test_unorderable_nodes(self) -> None: ...

class TestDagLongestPathLength:
    def test_unweighted(self) -> None: ...
    def test_undirected_not_implemented(self) -> None: ...
    def test_weighted(self) -> None: ...

class TestDAG:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_topological_sort1(self) -> None: ...
    def test_is_directed_acyclic_graph(self) -> None: ...
    def test_topological_sort2(self) -> None: ...
    def test_topological_sort3(self) -> None: ...
    def test_topological_sort4(self) -> None: ...
    def test_topological_sort5(self) -> None: ...
    def test_topological_sort6(self) -> None: ...
    def test_all_topological_sorts_1(self) -> None: ...
    def test_all_topological_sorts_2(self) -> None: ...
    def test_all_topological_sorts_3(self) -> None: ...
    def test_all_topological_sorts_4(self) -> None: ...
    def test_all_topological_sorts_multigraph_1(self) -> None: ...
    def test_all_topological_sorts_multigraph_2(self) -> None: ...
    def test_ancestors(self) -> None: ...
    def test_descendants(self) -> None: ...
    def test_transitive_closure(self) -> None: ...
    def test_reflexive_transitive_closure(self) -> None: ...
    def test_transitive_closure_dag(self) -> None: ...
    def test_transitive_reduction(self) -> None: ...
    def test_antichains(self): ...
    def test_lexicographical_topological_sort(self): ...
    label: Incomplete
    priority: int
    def test_lexicographical_topological_sort2(self): ...

def test_topological_generations() -> None: ...
def test_topological_generations_empty() -> None: ...
def test_topological_generations_cycle() -> None: ...
def test_is_aperiodic_cycle() -> None: ...
def test_is_aperiodic_cycle2() -> None: ...
def test_is_aperiodic_cycle3() -> None: ...
def test_is_aperiodic_cycle4() -> None: ...
def test_is_aperiodic_selfloop() -> None: ...
def test_is_aperiodic_raise() -> None: ...
def test_is_aperiodic_bipartite() -> None: ...
def test_is_aperiodic_rary_tree() -> None: ...
def test_is_aperiodic_disconnected() -> None: ...
def test_is_aperiodic_disconnected2() -> None: ...

class TestDagToBranching:
    def test_single_root(self) -> None: ...
    def test_multiple_roots(self) -> None: ...
    def test_already_arborescence(self) -> None: ...
    def test_already_branching(self) -> None: ...
    def test_not_acyclic(self) -> None: ...
    def test_undirected(self) -> None: ...
    def test_multigraph(self) -> None: ...
    def test_multidigraph(self) -> None: ...

def test_ancestors_descendants_undirected() -> None: ...
