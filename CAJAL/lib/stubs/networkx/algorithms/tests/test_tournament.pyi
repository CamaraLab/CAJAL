from networkx import DiGraph as DiGraph
from networkx.algorithms.tournament import hamiltonian_path as hamiltonian_path, index_satisfying as index_satisfying, is_reachable as is_reachable, is_strongly_connected as is_strongly_connected, is_tournament as is_tournament, random_tournament as random_tournament, score_sequence as score_sequence, tournament_matrix as tournament_matrix

def test_condition_not_satisfied(): ...
def test_empty_iterable(): ...
def test_is_tournament() -> None: ...
def test_self_loops() -> None: ...
def test_missing_edges() -> None: ...
def test_bidirectional_edges() -> None: ...
def test_graph_is_tournament() -> None: ...
def test_graph_is_tournament_seed() -> None: ...
def test_graph_is_tournament_one_node() -> None: ...
def test_graph_is_tournament_zero_node() -> None: ...
def test_hamiltonian_empty_graph() -> None: ...
def test_path_is_hamiltonian() -> None: ...
def test_hamiltonian_cycle() -> None: ...
def test_score_sequence_edge() -> None: ...
def test_score_sequence_triangle() -> None: ...
def test_tournament_matrix() -> None: ...
def test_reachable_pair() -> None: ...
def test_same_node_is_reachable() -> None: ...
def test_unreachable_pair() -> None: ...
def test_is_strongly_connected() -> None: ...
def test_not_strongly_connected() -> None: ...
