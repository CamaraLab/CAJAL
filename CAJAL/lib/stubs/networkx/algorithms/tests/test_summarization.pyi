from _typeshed import Incomplete

class TestDirectedDedensification:
    def build_original_graph(self): ...
    def build_compressed_graph(self): ...
    def test_empty(self) -> None: ...
    @staticmethod
    def densify(G, compressor_nodes, copy: bool = ...): ...
    c_nodes: Incomplete
    def setup_method(self) -> None: ...
    def test_dedensify_edges(self) -> None: ...
    def test_dedensify_edge_count(self) -> None: ...
    def test_densify_edges(self) -> None: ...
    def test_densify_edge_count(self) -> None: ...

class TestUnDirectedDedensification:
    def build_original_graph(self): ...
    def test_empty(self) -> None: ...
    c_nodes: Incomplete
    def setup_method(self) -> None: ...
    def build_compressed_graph(self): ...
    def test_dedensify_edges(self) -> None: ...
    def test_dedensify_edge_count(self) -> None: ...

def test_summarization_empty(graph_type) -> None: ...

class AbstractSNAP:
    node_attributes: Incomplete
    def build_original_graph(self) -> None: ...
    def build_summary_graph(self) -> None: ...
    def test_summary_graph(self) -> None: ...
    def deterministic_labels(self, G): ...

class TestSNAPNoEdgeTypes(AbstractSNAP):
    relationship_attributes: Incomplete
    def test_summary_graph(self) -> None: ...
    def build_original_graph(self): ...
    def build_summary_graph(self): ...

class TestSNAPUndirected(AbstractSNAP):
    def build_original_graph(self): ...
    def build_summary_graph(self): ...

class TestSNAPDirected(AbstractSNAP):
    def build_original_graph(self): ...
    def build_summary_graph(self): ...

class TestSNAPUndirectedMulti(AbstractSNAP):
    def build_original_graph(self): ...
    def build_summary_graph(self): ...

class TestSNAPDirectedMulti(AbstractSNAP):
    def build_original_graph(self): ...
    def build_summary_graph(self): ...
