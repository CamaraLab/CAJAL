from _typeshed import Incomplete
from networkx.algorithms.planar_drawing import triangulate_embedding as triangulate_embedding

def test_graph1() -> None: ...
def test_graph2() -> None: ...
def test_circle_graph() -> None: ...
def test_grid_graph() -> None: ...
def test_one_node_graph() -> None: ...
def test_two_node_graph() -> None: ...
def test_three_node_graph() -> None: ...
def test_multiple_component_graph1() -> None: ...
def test_multiple_component_graph2() -> None: ...
def test_invalid_half_edge() -> None: ...
def test_triangulate_embedding1() -> None: ...
def test_triangulate_embedding2() -> None: ...
def check_triangulation(embedding, expected_embedding) -> None: ...
def check_embedding_data(embedding_data) -> None: ...
def is_close(a, b, rel_tol: float = ..., abs_tol: float = ...): ...
def point_in_between(a, b, p): ...
def check_edge_intersections(G, pos) -> None: ...

class Vector:
    x: Incomplete
    y: Incomplete
    node: Incomplete
    quadrant: int
    def __init__(self, x, y, node) -> None: ...
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    def __ne__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

def planar_drawing_conforms_to_embedding(embedding, pos): ...
