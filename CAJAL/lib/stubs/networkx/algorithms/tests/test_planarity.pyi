from _typeshed import Incomplete
from networkx.algorithms.planarity import check_planarity_recursive as check_planarity_recursive, get_counterexample as get_counterexample, get_counterexample_recursive as get_counterexample_recursive

class TestLRPlanarity:
    @staticmethod
    def check_graph(G, is_planar: Incomplete | None = ...) -> None: ...
    def test_simple_planar_graph(self) -> None: ...
    def test_planar_with_selfloop(self) -> None: ...
    def test_k3_3(self) -> None: ...
    def test_k5(self) -> None: ...
    def test_multiple_components_planar(self) -> None: ...
    def test_multiple_components_non_planar(self) -> None: ...
    def test_non_planar_with_selfloop(self) -> None: ...
    def test_non_planar1(self) -> None: ...
    def test_loop(self) -> None: ...
    def test_comp(self) -> None: ...
    def test_goldner_harary(self) -> None: ...
    def test_planar_multigraph(self) -> None: ...
    def test_non_planar_multigraph(self) -> None: ...
    def test_planar_digraph(self) -> None: ...
    def test_non_planar_digraph(self) -> None: ...
    def test_single_component(self) -> None: ...
    def test_graph1(self) -> None: ...
    def test_graph2(self) -> None: ...
    def test_graph3(self) -> None: ...
    def test_counterexample_planar(self) -> None: ...
    def test_counterexample_planar_recursive(self) -> None: ...

def check_embedding(G, embedding) -> None: ...
def check_counterexample(G, sub_graph) -> None: ...

class TestPlanarEmbeddingClass:
    def test_get_data(self) -> None: ...
    def test_missing_edge_orientation(self) -> None: ...
    def test_invalid_edge_orientation(self) -> None: ...
    def test_missing_half_edge(self) -> None: ...
    def test_not_fulfilling_euler_formula(self) -> None: ...
    def test_missing_reference(self) -> None: ...
    def test_connect_components(self) -> None: ...
    def test_successful_face_traversal(self) -> None: ...
    def test_unsuccessful_face_traversal(self) -> None: ...
    @staticmethod
    def get_star_embedding(n): ...
