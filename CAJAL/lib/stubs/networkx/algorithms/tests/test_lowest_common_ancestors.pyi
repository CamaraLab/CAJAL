import networkx as nx
from _typeshed import Incomplete

tree_all_pairs_lca = nx.tree_all_pairs_lowest_common_ancestor
all_pairs_lca = nx.all_pairs_lowest_common_ancestor

def get_pair(dictionary, n1, n2): ...

class TestTreeLCA:
    @classmethod
    def setup_class(cls) -> None: ...
    @staticmethod
    def assert_has_same_pairs(d1, d2) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor1(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor2(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor3(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor4(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor5(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor6(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor7(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor8(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor9(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor10(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor12(self) -> None: ...
    def test_not_implemented_for(self) -> None: ...
    def test_tree_all_pairs_lowest_common_ancestor13(self) -> None: ...

class TestDAGLCA:
    @classmethod
    def setup_class(cls) -> None: ...
    def assert_lca_dicts_same(self, d1, d2, G: Incomplete | None = ...) -> None: ...
    def test_all_pairs_lowest_common_ancestor1(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor2(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor3(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor4(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor5(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor6(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor7(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor8(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor9(self) -> None: ...
    def test_all_pairs_lowest_common_ancestor10(self) -> None: ...
    def test_lowest_common_ancestor1(self) -> None: ...
    def test_lowest_common_ancestor2(self) -> None: ...
    def test_naive_lowest_common_ancestor1(self) -> None: ...
    def test_naive_lowest_common_ancestor2(self) -> None: ...
