from networkx.algorithms.approximation import k_components as k_components

def build_k_number_dict(k_components): ...
def graph_example_1(): ...
def torrents_and_ferraro_graph(): ...
def test_torrents_and_ferraro_graph() -> None: ...
def test_example_1() -> None: ...
def test_karate_0() -> None: ...
def test_karate_1() -> None: ...
def test_example_1_detail_3_and_4() -> None: ...
def test_directed() -> None: ...
def test_same() -> None: ...

class TestAntiGraph:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_size(self) -> None: ...
    def test_degree(self) -> None: ...
    def test_core_number(self) -> None: ...
    def test_connected_components(self) -> None: ...
    def test_adj(self) -> None: ...
    def test_adjacency(self) -> None: ...
    def test_neighbors(self) -> None: ...
    def test_node_not_in_graph(self) -> None: ...
    def test_degree_thingraph(self) -> None: ...
