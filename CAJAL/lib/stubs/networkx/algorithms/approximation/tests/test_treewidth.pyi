from networkx.algorithms.approximation import treewidth_min_degree as treewidth_min_degree, treewidth_min_fill_in as treewidth_min_fill_in
from networkx.algorithms.approximation.treewidth import MinDegreeHeuristic as MinDegreeHeuristic, min_fill_in_heuristic as min_fill_in_heuristic

def is_tree_decomp(graph, decomp) -> None: ...

class TestTreewidthMinDegree:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_petersen_graph(self) -> None: ...
    def test_small_tree_treewidth(self) -> None: ...
    def test_heuristic_abort(self) -> None: ...
    def test_empty_graph(self) -> None: ...
    def test_two_component_graph(self) -> None: ...
    def test_not_sortable_nodes(self) -> None: ...
    def test_heuristic_first_steps(self) -> None: ...

class TestTreewidthMinFillIn:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_petersen_graph(self) -> None: ...
    def test_small_tree_treewidth(self) -> None: ...
    def test_heuristic_abort(self) -> None: ...
    def test_empty_graph(self) -> None: ...
    def test_two_component_graph(self) -> None: ...
    def test_not_sortable_nodes(self) -> None: ...
    def test_heuristic_first_steps(self) -> None: ...
