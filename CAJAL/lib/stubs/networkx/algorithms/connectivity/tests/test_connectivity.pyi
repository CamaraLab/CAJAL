from _typeshed import Incomplete
from networkx.algorithms import flow as flow
from networkx.algorithms.connectivity import local_edge_connectivity as local_edge_connectivity, local_node_connectivity as local_node_connectivity

flow_funcs: Incomplete

def test_average_connectivity() -> None: ...
def test_average_connectivity_directed() -> None: ...
def test_articulation_points() -> None: ...
def test_brandes_erlebach() -> None: ...
def test_white_harary_1() -> None: ...
def test_white_harary_2() -> None: ...
def test_complete_graphs() -> None: ...
def test_empty_graphs() -> None: ...
def test_petersen() -> None: ...
def test_tutte() -> None: ...
def test_dodecahedral() -> None: ...
def test_octahedral() -> None: ...
def test_icosahedral() -> None: ...
def test_missing_source() -> None: ...
def test_missing_target() -> None: ...
def test_edge_missing_source() -> None: ...
def test_edge_missing_target() -> None: ...
def test_not_weakly_connected() -> None: ...
def test_not_connected() -> None: ...
def test_directed_edge_connectivity() -> None: ...
def test_cutoff() -> None: ...
def test_invalid_auxiliary() -> None: ...
def test_interface_only_source() -> None: ...
def test_interface_only_target() -> None: ...
def test_edge_connectivity_flow_vs_stoer_wagner() -> None: ...

class TestAllPairsNodeConnectivity:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_cycles(self) -> None: ...
    def test_complete(self) -> None: ...
    def test_paths(self) -> None: ...
    def test_all_pairs_connectivity_nbunch(self) -> None: ...
    def test_all_pairs_connectivity_icosahedral(self) -> None: ...
    def test_all_pairs_connectivity(self) -> None: ...
    def test_all_pairs_connectivity_directed(self) -> None: ...
    def test_all_pairs_connectivity_nbunch_combinations(self) -> None: ...
    def test_all_pairs_connectivity_nbunch_iter(self) -> None: ...
