from networkx.algorithms.connectivity import k_edge_augmentation as k_edge_augmentation
from networkx.algorithms.connectivity.edge_augmentation import collapse as collapse, complement_edges as complement_edges, is_k_edge_connected as is_k_edge_connected, is_locally_k_edge_connected as is_locally_k_edge_connected
from networkx.utils import pairwise as pairwise

MAX_EFFICIENT_K: int

def tarjan_bridge_graph(): ...
def test_weight_key() -> None: ...
def test_is_locally_k_edge_connected_exceptions() -> None: ...
def test_is_k_edge_connected() -> None: ...
def test_is_k_edge_connected_exceptions() -> None: ...
def test_is_locally_k_edge_connected() -> None: ...
def test_null_graph() -> None: ...
def test_cliques() -> None: ...
def test_clique_and_node() -> None: ...
def test_point_graph() -> None: ...
def test_edgeless_graph() -> None: ...
def test_invalid_k() -> None: ...
def test_unfeasible() -> None: ...
def test_tarjan() -> None: ...
def test_configuration() -> None: ...
def test_shell() -> None: ...
def test_karate() -> None: ...
def test_star() -> None: ...
def test_barbell() -> None: ...
def test_bridge() -> None: ...
def test_gnp_augmentation() -> None: ...
