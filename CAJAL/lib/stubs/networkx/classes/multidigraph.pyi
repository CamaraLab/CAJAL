from _typeshed import Incomplete
from networkx.classes.digraph import DiGraph
from networkx.classes.multigraph import MultiGraph

class MultiDiGraph(MultiGraph, DiGraph):
    edge_key_dict_factory: Incomplete
    def __init__(self, incoming_graph_data: Incomplete | None = ..., multigraph_input: Incomplete | None = ..., **attr) -> None: ...
    def adj(self): ...
    def succ(self): ...
    def pred(self): ...
    def add_edge(self, u_for_edge, v_for_edge, key: Incomplete | None = ..., **attr): ...
    def remove_edge(self, u, v, key: Incomplete | None = ...) -> None: ...
    def edges(self): ...
    def out_edges(self): ...
    def in_edges(self): ...
    def degree(self): ...
    def in_degree(self): ...
    def out_degree(self): ...
    def is_multigraph(self): ...
    def is_directed(self): ...
    def to_undirected(self, reciprocal: bool = ..., as_view: bool = ...): ...
    def reverse(self, copy: bool = ...): ...
