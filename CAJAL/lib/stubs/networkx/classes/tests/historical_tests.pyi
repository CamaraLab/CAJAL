from networkx.utils import edges_equal as edges_equal, nodes_equal as nodes_equal

class HistoricalTests:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_name(self) -> None: ...
    def test_add_remove_node(self) -> None: ...
    def test_nonhashable_node(self) -> None: ...
    def test_add_nodes_from(self) -> None: ...
    def test_contains(self) -> None: ...
    def test_add_remove(self) -> None: ...
    def test_nbunch_is_list(self) -> None: ...
    def test_nbunch_is_set(self) -> None: ...
    def test_nbunch_dict(self) -> None: ...
    def test_nbunch_iterator(self) -> None: ...
    def test_nbunch_graph(self) -> None: ...
    def test_add_edge(self) -> None: ...
    def test_self_loop(self) -> None: ...
    def test_add_edges_from(self) -> None: ...
    def test_add_edges_from2(self) -> None: ...
    def test_add_edges_from3(self) -> None: ...
    def test_remove_edge(self) -> None: ...
    def test_edges_nbunch(self) -> None: ...
    def test_degree(self) -> None: ...
    def test_degree2(self) -> None: ...
    def test_degree_graph(self) -> None: ...
    def test_null(self) -> None: ...
    def test_order_size(self) -> None: ...
    def test_copy(self) -> None: ...
    def test_subgraph(self) -> None: ...
    def test_to_directed(self) -> None: ...
    def test_to_undirected(self) -> None: ...
    def test_neighbors(self) -> None: ...
    def test_iterators(self) -> None: ...
    def test_null_subgraph(self) -> None: ...
    def test_empty_subgraph(self) -> None: ...
    def test_complete_subgraph(self) -> None: ...
    def test_subgraph_nbunch(self) -> None: ...
    def test_node_tuple_issue(self) -> None: ...
