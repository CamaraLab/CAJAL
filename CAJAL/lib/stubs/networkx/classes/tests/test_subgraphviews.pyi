from _typeshed import Incomplete
from networkx.utils import edges_equal as edges_equal

class TestSubGraphView:
    gview: Incomplete
    graph: Incomplete
    hide_edges_filter: Incomplete
    show_edges_filter: Incomplete
    @classmethod
    def setup_class(cls) -> None: ...
    def test_hidden_nodes(self) -> None: ...
    def test_hidden_edges(self) -> None: ...
    def test_shown_node(self) -> None: ...
    def test_shown_edges(self) -> None: ...

class TestSubDiGraphView(TestSubGraphView):
    gview: Incomplete
    graph: Incomplete
    hide_edges_filter: Incomplete
    show_edges_filter: Incomplete
    hide_edges: Incomplete
    excluded: Incomplete
    def test_inoutedges(self) -> None: ...
    def test_pred(self) -> None: ...
    def test_inout_degree(self) -> None: ...

class TestMultiGraphView(TestSubGraphView):
    gview: Incomplete
    graph: Incomplete
    hide_edges_filter: Incomplete
    show_edges_filter: Incomplete
    @classmethod
    def setup_class(cls) -> None: ...
    def test_hidden_edges(self) -> None: ...
    def test_shown_edges(self) -> None: ...

class TestMultiDiGraphView(TestMultiGraphView, TestSubDiGraphView):
    gview: Incomplete
    graph: Incomplete
    hide_edges_filter: Incomplete
    show_edges_filter: Incomplete
    hide_edges: Incomplete
    excluded: Incomplete
    def test_inout_degree(self) -> None: ...

class TestInducedSubGraph:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_full_graph(self) -> None: ...
    def test_partial_subgraph(self) -> None: ...
    def same_attrdict(self, H, G) -> None: ...
    def graphs_equal(self, H, G) -> None: ...

class TestEdgeSubGraph:
    @classmethod
    def setup_class(cls) -> None: ...
    def test_correct_nodes(self) -> None: ...
    def test_correct_edges(self) -> None: ...
    def test_add_node(self) -> None: ...
    def test_remove_node(self) -> None: ...
    def test_node_attr_dict(self) -> None: ...
    def test_edge_attr_dict(self) -> None: ...
    def test_graph_attr_dict(self) -> None: ...
    def test_readonly(self) -> None: ...
